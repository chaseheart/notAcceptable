package com.isolver.controller;

import java.io.File;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.ObjectOptimisticLockingFailureException;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.isolver.common.config.AuthenticationFacade;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.Result;
import com.isolver.entity.User;
import com.isolver.form.CustStepFormCreateRelationshipFormList;
import com.isolver.form.UnusualAttendanceForm;
import com.isolver.service.UserService;

@RestController
public class MainController {

	private static final Logger logger = LoggerFactory.getLogger(MainController.class);

	@Autowired
	private UserService userService;

	/**
	 * main初始化数据
	 * 
	 * @return
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public ModelAndView indexView2() {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("main");

		Long id = AuthenticationFacade.getUserId();
		User user = userService.getUserById(id);

		modelAndView.addObject("userName", user.getUsername());

		return modelAndView;

	}

	/**
	 * main初始化数据
	 * 
	 * @return
	 */
	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public ModelAndView indexView() {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("main");

		Long id = AuthenticationFacade.getUserId();
		User user = userService.getUserById(id);

		modelAndView.addObject("userName", user.getUsername());

		return modelAndView;

	}

	
	@RequestMapping(value = "/test/json", method = RequestMethod.POST)
	public Result<Object> Application(@RequestBody CustStepFormCreateRelationshipFormList formdata) {
		try {
			System.err.println(formdata.getFormData().get(0).getId());
			return new Result<>();
		} catch (Exception e) {
			logger.error("提交申请失败", e);
			throw new RuntimeException(e);
		}
	}
	
	@RequestMapping(value = "/test/csv", method = RequestMethod.POST)
	public Result<Object> csv(@RequestParam("file") MultipartFile file,  @RequestParam("pyName") String pyName,
			@RequestParam("pyPath") String pyPath) {
		File f;
		System.err.println(file);
		// 获得文件名
		String filename = file.getOriginalFilename();
		int dot = filename.lastIndexOf(".");
		String extension = filename.substring(dot + 1);

		String newFilename = pyName + "." + extension;

		String filepath = "D:\\py\\csv\\lj";
		f = new File(filepath);
		// 创建文件夹
		if (!f.exists()) {
			f.mkdirs();
		}
		// 创建excel
		f = new File("D:\\py\\csv\\lj\\" + newFilename);
		try {
			//保存excel
			file.transferTo(f);
			return new Result<>(SysStatusCodeConst.SUCCESS);
		} catch (ObjectOptimisticLockingFailureException e) {
			return new Result<>(SysStatusCodeConst.LOCKUP_VALID);
		} catch (Exception e) {
			e.printStackTrace();
			return new Result<>(SysStatusCodeConst.SYSERROR);
		}
	}
	
	
}
