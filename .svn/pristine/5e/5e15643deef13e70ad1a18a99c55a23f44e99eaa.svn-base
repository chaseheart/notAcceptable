package com.isolver.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.Dateutil;
import com.isolver.common.util.Encodeutil;
import com.isolver.common.util.PinYinUtil;
import com.isolver.common.util.Result;
import com.isolver.dao.department.DepartmentRepository;
import com.isolver.dao.menu.MenuRepository;
import com.isolver.dao.menuSetting.MenuSettingRepository;
import com.isolver.dao.oaFlowStep.OaFlowStepRepository;
import com.isolver.dao.role.RoleRepository;
import com.isolver.dao.user.UserRepository;
import com.isolver.dto.SysUserDto;
import com.isolver.dto.UserDto;
import com.isolver.entity.Department;
import com.isolver.entity.Menu;
import com.isolver.entity.MenuSetting;
import com.isolver.entity.OaFlowStep;
import com.isolver.entity.Role;
import com.isolver.entity.User;
import com.isolver.form.PageableForm;
import com.isolver.form.PersonForm;

/**
 * 用户管理
 * 
 * @author IS1907006
 * @date 2019/08/20
 * @class UserService.java
 */
@Service
public class UserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private OaFlowStepRepository oaFlowStepRepository;
	@Autowired
	private DepartmentRepository departmentRepository;
	@Autowired
	private MenuSettingRepository menuSettingRepository;
	@Autowired
	private MenuRepository menuRepository;

	/**
	 * 条件检索所有用户信息
	 * 
	 * @param workId
	 * @param username
	 * @param org
	 * @param depart
	 * @return
	 */
	public Map<String, Object> findAllUserByCondition(String workId, String username, Long org, Long depart, PageableForm pageableForm) {

		// TODO sql重写，条件检索需写原生sql
//		return userRepository.findAllUserByPageAndDelete(SysStaticConst.NOTDELE);
		return userRepository.findAllUserByPageAndDelete(workId, username, org, depart, SysStaticConst.NOTDELE, pageableForm);
	}

	/**
	 * 初期化检索所有数据
	 * 
	 * @return
	 */
	public Map<String, Object> findAllUser() {
//		Pageable pageable = new PageRequest(SysStaticConst.FIRSTPAGE, SysStaticConst.INITPAGESIZE);
//		return userRepository.findAllUserByDelete(SysStaticConst.NOTDELE, pageable);
		PageableForm pageableForm = new PageableForm(0, 10);
		return userRepository.findAllUserByPageAndDelete("", "", null, null, SysStaticConst.NOTDELE, pageableForm);
	}

	/**
	 * 根据登录id检索用户
	 * 
	 * @param loginId 登录id
	 * @return
	 */
	public User getUserById(Long id) {
		return userRepository.findOne(id);
	}

	/**
	 * 根据用户层级、部门id、流程类型检索用户
	 * 
	 * @param departId  部门id
	 * @param userLevel 用户层级
	 * @param flowType  流程类型
	 * @return
	 */
	public List<SysUserDto> findUserByDepartAndRole(Long departId, Long roleId, Long flowType) {
		return oaFlowStepRepository.getNextStepUserList(roleId, flowType, departId);
	}

	/**
	 * 检索所有用户
	 * 
	 * @return
	 */
	public Map<String, List<UserDto>> findAll() {
		List<UserDto> resultList = new ArrayList<>();
		List<User> userList = userRepository.findAll();
		for (User user : userList) {
			UserDto model = new UserDto(user);
			model.setFirstChart(PinYinUtil.getFirstLetter(user.getUsername()));
			resultList.add(model);
		}

		Map<String, List<UserDto>> resultMap = resultList.stream().collect(Collectors.groupingBy(UserDto::getFirstChart));
		return resultMap;
	}

	/**
	 * 模糊检索用户
	 * 
	 * @return
	 */
	public Map<String, List<UserDto>> findUserLike(String username) {
		List<UserDto> resultList = new ArrayList<>();
		List<User> userList = userRepository.findByUsernameLike(username);
		for (User user : userList) {
			UserDto model = new UserDto(user);
			model.setFirstChart(PinYinUtil.getFirstLetter(user.getUsername()));
			resultList.add(model);
		}

		Map<String, List<UserDto>> resultMap = resultList.stream().collect(Collectors.groupingBy(UserDto::getFirstChart));
		return resultMap;
	}

	/**
	 * 检索一条用户
	 * 
	 * @param userId 用户ID
	 * @return
	 */
	public UserDto findAllById(Long userId) {
		User user = userRepository.findByIdAndDeleteFlag(userId, SysStaticConst.NOTDELE);

		UserDto userDto = new UserDto(user);
		return userDto;
	}


	public User findUserByworkId(String workId) {
		User user = userRepository.findByWorkIdAndDeleteFlag(workId, SysStaticConst.NOTDELE);
		return user;
	}

	/**
	 * 
	 * 检索上级用户（报销用）
	 * 
	 * @param level
	 * @return
	 */
	public List<SysUserDto> findAllByRole(Long roleId) {
		return oaFlowStepRepository.getNextStepUserList(roleId, 2L, null);

	}

	/**
	 * 批量新增用户
	 * 
	 * @param userList
	 * @param userId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<String> setUserList(List<Object> result, Long userId) {
		List<String> userList = new ArrayList<>();

		List<String> resultList = new ArrayList<>();
		for (int i = 1; i < result.size(); i++) {
			userList = (List<String>) result.get(i);
			String workId = userList.get(2);
			User user = userRepository.findByWorkIdAndDeleteFlag(workId, SysStaticConst.NOTDELE);
			Department depart = departmentRepository.findByDepartNameAndDeleteFlag(userList.get(3), SysStaticConst.NOTDELE);

			// 部门存在的情况可以新增用户
			// 用户不存在，新增
			if (depart != null && user == null) {
				Role role = roleRepository.findByRoleNameAndDeleteFlag(userList.get(7), SysStaticConst.NOTDELE);
				// 角色不存在时，新增角色
				if (role == null) {
					role = new Role();
					role.setRoleName(userList.get(7));
					role.setIsManager(false);
					role.setInsertUserId(userId);
					role.setInsertTime(Dateutil.getTimestamp());
					role.setUpdateUserId(userId);
					role.setUpdateTime(Dateutil.getTimestamp());
					role.setDeleteFlag(SysStaticConst.NOTDELE);
					role = roleRepository.saveAndFlush(role);
				}
				// 新增用户
				user = new User();
				user.setUsername(userList.get(1));
				user.setWorkId(workId);
				user.setDepart(depart);
				user.setPassword(Encodeutil.MD5Util(workId + "123456"));
				user.setPhone(userList.get(4));
				user.setEmail(userList.get(5));
				user.setInsertUserId(userId);
				user.setInsertTime(Dateutil.getTimestamp());
				user.setUpdateUserId(userId);
				user.setUpdateTime(Dateutil.getTimestamp());
				user.setDeleteFlag(SysStaticConst.NOTDELE);
				user.setRole(role);
				user.setHolidayType(userList.get(6).equals("J"));
				user = userRepository.saveAndFlush(user);
				List<Menu> menu = menuRepository.findAll();
				// 微信菜单
				for (Menu m : menu) {
					MenuSetting menuSetting = new MenuSetting();
					menuSetting.setUserId(user);
					menuSetting.setMenuId(m);
					menuSetting.setIsVisible(true);
					menuSetting.setInsertUserId(userId);
					menuSetting.setInsertTime(Dateutil.getTimestamp());
					menuSetting.setUpdateUserId(userId);
					menuSetting.setUpdateTime(Dateutil.getTimestamp());
					menuSetting.setDeleteFlag(SysStaticConst.NOTDELE);
					menuSettingRepository.saveAndFlush(menuSetting);
				}
			} else {
				resultList.add(userList.get(0));
			}
		}
		return resultList;

	}

	/**
	 * 批量新增用户
	 * 
	 * @param userList
	 * @param userId
	 * @return
	 */
	public Boolean setUser(PersonForm personForm, Long userId) {
		User user = userRepository.findByWorkId(personForm.getWorkId());
		Department depart = departmentRepository.findOne(Long.valueOf(personForm.getDepart()));
		Role role = roleRepository.findOne(Long.valueOf(personForm.getRole()));
		// 部门存在的情况可以新增用户
		if (depart != null && role != null) {
			// 用户不存在，新增
			if (user == null) {
				user = new User();
				user.setUsername(personForm.getUsername());
				user.setWorkId(personForm.getWorkId());
				user.setDepart(depart);
				user.setPassword(Encodeutil.MD5Util(personForm.getWorkId() + "123456"));
				user.setPhone(personForm.getPhone());
				user.setEmail(personForm.getEmail());
				user.setRole(role);
				user.setHolidayType(!personForm.getCalType().equals("0"));
				user.setInsertUserId(userId);
				user.setInsertTime(Dateutil.getTimestamp());
				user.setUpdateUserId(userId);
				user.setUpdateTime(Dateutil.getTimestamp());
				user.setDeleteFlag(SysStaticConst.NOTDELE);
				user = userRepository.saveAndFlush(user);
				List<Menu> menu = menuRepository.findAll();
				for (Menu m : menu) {
					MenuSetting menuSetting = new MenuSetting();
					menuSetting.setUserId(user);
					menuSetting.setMenuId(m);
					menuSetting.setIsVisible(true);
					menuSetting.setInsertUserId(userId);
					menuSetting.setInsertTime(Dateutil.getTimestamp());
					menuSetting.setUpdateUserId(userId);
					menuSetting.setUpdateTime(Dateutil.getTimestamp());
					menuSetting.setDeleteFlag(SysStaticConst.NOTDELE);
					menuSettingRepository.saveAndFlush(menuSetting);
				}

			} else {
				// 用户存在，修改
				return false;
			}
			return true;
		}
		return false;
	}

	/**
	 * 批量新增用户
	 * 
	 * @param userList
	 * @param userId
	 * @return
	 */
	public Boolean updatePerson(PersonForm personForm, Long userId) {
		User user = userRepository.findByWorkId(personForm.getWorkId());
		Department depart = departmentRepository.findOne(Long.valueOf(personForm.getDepart()));
		Role role = roleRepository.findOne(Long.valueOf(personForm.getRole()));
		// 部门存在的情况可以新增用户
		if (depart != null && role != null) {
			// 用户存在，修改
			User entity = new User();
			BeanUtils.copyProperties(user, entity);
			entity.setUsername(personForm.getUsername());
			entity.setWorkId(personForm.getWorkId());
			entity.setDepart(depart);
			entity.setRole(role);
			entity.setHolidayType(!personForm.getCalType().equals("0"));
			entity.setPassword(Encodeutil.MD5Util(personForm.getWorkId() + "123456"));
			entity.setPhone(personForm.getPhone());
			entity.setEmail(personForm.getEmail());
			entity.setUpdateUserId(userId);
			entity.setUpdateTime(Dateutil.getTimestamp());
			userRepository.saveAndFlush(entity);
			return true;
		}
		return false;
	}

	/**
	 * 删除一条用户
	 * 
	 * @param personId
	 * @param userId
	 * @return
	 */
	public Result<Object> deletePerson(Long personId, Long userId) {
		User userModel = userRepository.findOne(personId);
		User userEntity = new User();
		BeanUtils.copyProperties(userModel, userEntity);
		userEntity.setDeleteFlag(SysStaticConst.ISDELE);
		userEntity.setUpdateUserId(userId);
		userEntity.setUpdateTime(Dateutil.getTimestamp());
		userRepository.saveAndFlush(userEntity);
		return new Result<>(SysStatusCodeConst.SUCCESS);
	}
	/**
	 * ·该角色是否有后续步骤 考勤
	 * @param user 登陆者
	 * @return
	 */
	public List<OaFlowStep> getNextUser(User user) {
		return oaFlowStepRepository.getNextStepLevel(user.getRole().getId(), 1L);
	}
	
	/**
	 * ·该角色是否有后续步骤 
	 * @param user 登陆者
	 * @return
	 */
	public List<OaFlowStep> getNextClamingUser(User user) {
		return oaFlowStepRepository.getNextStepLevel(user.getRole().getId(), 2L);
	}
}
