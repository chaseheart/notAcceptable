package com.isolver.controller;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.isolver.common.config.AuthenticationFacade;
import com.isolver.common.constant.HtmlConst;
import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.FileUtil;
import com.isolver.common.util.HttpUtil;
import com.isolver.common.util.JsonUtil;
import com.isolver.common.util.Result;
import com.isolver.dto.DepartDto;
import com.isolver.dto.UserDto;
import com.isolver.entity.FileInfo;
import com.isolver.entity.User;
import com.isolver.form.wechat.ClaimingExpensesForm;
import com.isolver.form.wechat.FileSaveResultForm;
import com.isolver.service.DepartmentService;
import com.isolver.service.FilePCService;
import com.isolver.service.UserService;
import com.isolver.service.wechat.ClamingExpensesService;

@RestController
@RequestMapping(value = "/claimingExpenses")
public class ClaimingExpensesPCController {
	// 图片临时路径
	private static final String FILEPATH = "C:\\img\\";

	// 图片存储虚拟路径
	private static final String PICPATH = "http://192.168.100.24:6080/photo/img/";

	@Autowired
	private FilePCService filePCService;
	private static final Logger logger = LoggerFactory.getLogger(ClaimingExpensesPCController.class);

	@Autowired
	private UserService userService;

	@Autowired
	private DepartmentService departmentService;
	@Autowired
	private ClamingExpensesService clamingExpensesService;

	/**
	 * main初始化数据
	 * 
	 * @return
	 * @throws JsonProcessingException
	 */
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public ModelAndView indexView2() throws JsonProcessingException {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("claimingExpenses");
		Long userId = AuthenticationFacade.getUserId();
		User user = userService.getUserById(userId);
		modelAndView.addObject("username", JsonUtil.objectToJSON(new UserDto(user)));
		List<UserDto> assigners = userService.findAllByRole(user.getRole().getLevel());
		modelAndView.addObject("assigners", JsonUtil.objectToJSON(assigners));
		List<DepartDto> departList = departmentService.getDepartList();
		modelAndView.addObject("depart", JsonUtil.objectToJSON(departList));

		modelAndView.addObject("html", HtmlConst.SAVEAPPLICATION);
		return modelAndView;

	}

	@RequestMapping(value = "/saveFiles", method = RequestMethod.POST)
	@ResponseBody
	public Result<Object> saveFiles(@RequestParam("file") MultipartFile[] file, @RequestParam(value = "picId") String[] picId, HttpServletRequest request) {
		try {
			Long userId = AuthenticationFacade.getUserId();

			List<FileSaveResultForm> picFormList = FileUtil.createPic(file, FILEPATH, PICPATH);
			// 压缩文件
			File zipfile = FileUtil.makeZip(FILEPATH + "\\", SysStaticConst.ZIPNAME, SysStaticConst.ZIPPATH);
			// 调用图片服务器接口
			HttpUtil.postData(SysStaticConst.FILEURL, zipfile);
			// 符号'/'位置
//			int sign = 0;
//			FileSaveResultForm picForm;
			// 排除已存在的图片进行新增
//			picForm = new FileSaveResultForm(picId[i].substring(sign, picId[i].length()).replace("resize", ""), picId[i].substring(0, sign), "", "");
//			picFormList.add(picForm);
			List<FileInfo> filelist = filePCService.createFile(picFormList, userId);
//			// 删除源文件
			FileUtil.deleteFile(SysStaticConst.ZIPPATH + SysStaticConst.ZIPNAME);
			return new Result<>(SysStatusCodeConst.SUCCESS, filelist);
		} catch (Exception e) {
			logger.error("新增失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 休假初始化数据（审批页面）
	 * 
	 * @return
	 */
	@RequestMapping(value = "/pending", method = RequestMethod.GET)
	public ModelAndView indexView2(String ruFlowId) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("claimingExpenses");
		Long userId = AuthenticationFacade.getUserId();
		User user = userService.getUserById(userId);
		modelAndView.addObject("username", JsonUtil.objectToJSON(new UserDto(user)));
		List<UserDto> assigners = userService.findAllByRole(user.getRole().getLevel());
		modelAndView.addObject("assigners", JsonUtil.objectToJSON(assigners));
		List<DepartDto> departList = departmentService.getDepartList();
		modelAndView.addObject("depart", JsonUtil.objectToJSON(departList));
		modelAndView.addObject("ruFlowId", ruFlowId);
		modelAndView.addObject("html", HtmlConst.PENDINGBUTTON);
		return modelAndView;

	}

	/**
	 * 提交报销申请
	 * 
	 * @return
	 */
	@RequestMapping(value = "/application", method = RequestMethod.POST)
	public Result<Object> application(@ModelAttribute ClaimingExpensesForm claimingExpensesForm) {
		try {
			Long userId = AuthenticationFacade.getUserId();
			claimingExpensesForm.setUserId(userId.toString());
			return clamingExpensesService.insertClamingExpenses(claimingExpensesForm);
		} catch (NullPointerException e) {
			return new Result<>(SysStatusCodeConst.SYSERROR);
		} catch (Exception e) {
			logger.error("提交失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 审批报销申请
	 * 
	 * @return
	 */
	@RequestMapping(value = "/dealApplication", method = RequestMethod.POST)
	public Result<Object> agreeApplication(String assigner, Long ruFlow) {
		try {
			Long userId = AuthenticationFacade.getUserId();
			User assign = new User();
			// 下步审批人
			if (!StringUtils.isBlank(assigner)) {
				assign = userService.getUserById(Long.valueOf(assigner));
			}
			// 自己
			User user = userService.getUserById(userId);
			clamingExpensesService.nextStep(assign, ruFlow, user);
			return new Result<>();
		} catch (NullPointerException e) {
			return new Result<>(SysStatusCodeConst.SYSERROR);
		} catch (Exception e) {
			logger.error("提交失败", e);
			throw new RuntimeException(e);
		}
	}

}
