package com.isolver.controller;

import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.sql.Date;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.isolver.common.config.AuthenticationFacade;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.JsonUtil;
import com.isolver.common.util.Result;
import com.isolver.dto.ServicePerformanceDto;
import com.isolver.dto.UserDto;
import com.isolver.entity.Holiday;
import com.isolver.entity.User;
import com.isolver.service.HolidayManageService;
import com.isolver.service.ServicePerformanceService;
import com.isolver.service.UserService;

/**
 * @author IS1907005
 * @date 2019/11/06
 * @class servicePerformanceController.java
 */

@RestController
@RequestMapping(value = "/servicePerformance")
public class ServicePerformanceController {

	private static final Logger logger = LoggerFactory.getLogger(ServicePerformanceController.class);

	@Autowired
	private UserService userService;
	@Autowired
	private ServicePerformanceService servicePerformanceService;
	@Autowired
	private HolidayManageService holidayManageService;

	/**
	 * 考勤初始化数据
	 * 
	 * @return
	 */
	@SuppressWarnings("deprecation")
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public ModelAndView servicePerformanceIndex() {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("servicePerformance");

		Long id = AuthenticationFacade.getUserId();
		User user = userService.getUserById(id);
		Holiday holiday = holidayManageService.findOneMonth(user.getDeleteFlag(), 2019, 10);
		Calendar cal = Calendar.getInstance();
		int firstDay = cal.getMinimum(Calendar.DATE);
		int lastDay = cal.getActualMaximum(Calendar.DATE);
		Date dateStart = new Date(cal.get(Calendar.YEAR) - 1900, cal.get(Calendar.MONTH) - 1, firstDay);
		Date dateEnd = new Date(cal.get(Calendar.YEAR) - 1900, cal.get(Calendar.MONTH) - 1, lastDay);
		Map<String, ServicePerformanceDto> dtoList = servicePerformanceService.findservicePerformance(user, dateStart, dateEnd);
		modelAndView.addObject("username", JsonUtil.getJsonArray(new UserDto(user)));
		modelAndView.addObject("servicePerformance", JsonUtil.getJsonArray(dtoList));
		modelAndView.addObject("holiday", JsonUtil.getJsonArray(holiday));
		modelAndView.addObject("month", lastDay);
		return modelAndView;

	}

	/**
	 * 考勤实绩检索
	 * 
	 * @return
	 */
	@SuppressWarnings("deprecation")
	@RequestMapping(value = "/findAllServicePerformance", method = RequestMethod.POST)
	public Result<Object> findAllServicePerformance(Integer oaYear, Integer oaMonth) {
		Map<String, Object> map = new HashMap<>();
		Long id = AuthenticationFacade.getUserId();
		User user = userService.getUserById(id);
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.MONTH, oaMonth - 1);
		cal.set(Calendar.YEAR, oaYear);
		int firstDay = cal.getMinimum(Calendar.DATE);
		int lastDay = cal.getActualMaximum(Calendar.DATE);
		Date dateStart = new Date(oaYear - 1900, oaMonth - 1, firstDay);
		Date dateEnd = new Date(oaYear - 1900, oaMonth - 1, lastDay);
		Map<String, ServicePerformanceDto> dtoList = servicePerformanceService.findservicePerformance(user, dateStart, dateEnd);
		map.put("servicePerformance", dtoList);
		Holiday holiday = holidayManageService.findOneMonth(user.getDeleteFlag(), oaYear, oaMonth);
		map.put("holiday", holiday);
		map.put("month", lastDay);
		return new Result<Object>(SysStatusCodeConst.SUCCESS, map);

	}

	/**
	 * 考勤实绩检索
	 * 
	 * @return
	 */
	@SuppressWarnings({ "deprecation", "null" })
	@RequestMapping(value = "/exportExcel", method = RequestMethod.GET)
	public void exportExcel(Integer oaYear, Integer oaMonth, HttpServletRequest request, HttpServletResponse response) {
		Long id = AuthenticationFacade.getUserId();
		User user = userService.getUserById(id);
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.MONTH, oaMonth - 1);
		cal.set(Calendar.YEAR, oaYear);
		int firstDay = cal.getMinimum(Calendar.DATE);
		int lastDay = cal.getActualMaximum(Calendar.DATE);
		Date dateStart = new Date(oaYear - 1900, oaMonth - 1, firstDay);
		Date dateEnd = new Date(oaYear - 1900, oaMonth - 1, lastDay);
		Map<String, ServicePerformanceDto> dtoList = servicePerformanceService.findservicePerformance(user, dateStart, dateEnd);
		Holiday holiday = holidayManageService.findOneMonth(user.getDeleteFlag(), oaYear, oaMonth);

		HSSFWorkbook wb = servicePerformanceService.exportExcel(dtoList,holiday);

		// 响应到客户端
		try {
			this.setResponseHeader(response, "qwer");
			OutputStream os = response.getOutputStream();
			wb.write(os);
			os.flush();
			os.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 发送响应流方法
	public void setResponseHeader(HttpServletResponse response, String fileName) {
		try {
			try {
				fileName = new String(fileName.getBytes(), "ISO8859-1");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			response.setContentType("application/octet-stream;charset=ISO8859-1");
			response.setHeader("Content-Disposition", "attachment;filename=" + fileName);
			response.addHeader("Pargam", "no-cache");
			response.addHeader("Cache-Control", "no-cache");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}
