package com.isolver.controller.sys;

import java.io.File;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.isolver.common.config.AuthenticationFacade;
import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysUrlConst;
import com.isolver.common.util.FileUtil;
import com.isolver.common.util.HttpUtil;
import com.isolver.common.util.JsonUtil;
import com.isolver.common.util.Result;
import com.isolver.dto.wechat.NewsDto;
import com.isolver.form.wechat.FileSaveResultForm;
import com.isolver.form.wechat.NewsForm;
import com.isolver.service.wechat.FileService;
import com.isolver.service.wechat.NewsService;

/**
 * @author IS1907005
 * @date 2019/11/29
 * @class OrgManageController.java
 */
@RestController
@RequestMapping(value = "/newsManage")
public class NewsManageController {

	@Autowired
	private NewsService newsService;

	@Autowired
	private FileService fileService;

	/**
	 * 通知页面初期化
	 * 
	 * @param id
	 * @return
	 */
	@PreAuthorize("hasRole('ROLE_3-6')")
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public ModelAndView indexView() {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("system/news");
		modelAndView.addObject("dataList", JsonUtil.objectToJSON(newsService.searchNotice(StringUtils.EMPTY, StringUtils.EMPTY)));
		return modelAndView;
	}

	/**
	 * 检索
	 * 
	 * @param content 内容
	 * @param type    类型
	 * @return
	 */
	@RequestMapping(value = "/searchData", method = RequestMethod.POST)
	public Result<Object> searchData(String content, String type) {
		return new Result<>(newsService.searchNotice(content, type));
	}

	/**
	 * 通知详情页面初始化
	 * 
	 * @param id 通知记录id
	 * @return
	 */
	@RequestMapping(value = "/detailView", method = RequestMethod.GET)
	public ModelAndView detailView(String id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("system/newsDetail");
		modelAndView.addObject("detail", newsService.getPCNewsDetail(Long.parseLong(id)));
		return modelAndView;
	}

	/**
	 * 通知新增页面初始化
	 * 
	 * @param id 通知记录id
	 * @return
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public ModelAndView detailIndex(String id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("system/newsDetail");
		modelAndView.addObject("detail", new NewsDto());
		return modelAndView;
	}

	/**
	 * 通知新增页面初始化
	 * 
	 * @param id 通知记录id
	 * @return
	 */
	@RequestMapping(value = "/detailEdit", method = RequestMethod.GET)
	public ModelAndView detailEdit(String id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("system/newsDetail");
		modelAndView.addObject("detail", new NewsDto());
		modelAndView.addObject("detailEdit", JsonUtil.objectToJSON(newsService.getPCNewsDetail(Long.parseLong(id))));
		return modelAndView;
	}

	/**
	 * 删除一条新闻
	 * 
	 * @return
	 */
	@RequestMapping(value = "/deleteNews", method = RequestMethod.POST)
	public Result<Object> deleteDepart(Long newsId) {
		Long userId = AuthenticationFacade.getUserId();
		return newsService.deleteNews(newsId, userId);
	}

	/**
	 * 新增一条新闻
	 * 
	 * @param newsId
	 * @return
	 */
	@RequestMapping(value = "/saveData", method = RequestMethod.POST)
	public Result<Object> saveData(@RequestParam("picFile") MultipartFile[] file, @ModelAttribute NewsForm newsForm) {
		Long userId = AuthenticationFacade.getUserId();
		Long picId = 0L;
		if (newsForm.getFlag() && StringUtils.isNotEmpty(newsForm.getId())) {
			fileService.deleteNoticeOldPic(newsForm.getId());
		}
		// 。判斷是否上传了图片
		if (file.length > 0) {
			List<FileSaveResultForm> picFormList = FileUtil.createPic(file, SysUrlConst.FILEPATH + "\\" + SysStaticConst.NEWSMANAGE, SysUrlConst.PICPATH + SysStaticConst.NEWSMANAGE + "/");
			// 。压缩文件
			File zipfile = FileUtil.makeZip(SysUrlConst.FILEPATH + "\\"+ SysStaticConst.NEWSMANAGE, SysStaticConst.ZIPNAME, SysUrlConst.ZIPPATH);
			// 。调用图片服务器接口
			HttpUtil.postData(SysUrlConst.PICSERVERPATH, zipfile);
			picId = fileService.createFile(picFormList, userId);
			// 。删除源文件
			FileUtil.deleteFile(SysUrlConst.ZIPPATH + SysStaticConst.ZIPNAME);
		}
		return newsService.saveData(picId, userId, newsForm);

	}
}
