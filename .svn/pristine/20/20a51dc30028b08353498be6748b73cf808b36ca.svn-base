package com.isolver.controller.wechat;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.Result;
import com.isolver.dto.OrgDto;
import com.isolver.entity.User;
import com.isolver.form.OverTimeForm;
import com.isolver.service.OrganizationService;
import com.isolver.service.OverTimeService;
import com.isolver.service.PendingService;
import com.isolver.service.ServicePerformanceService;
import com.isolver.service.UserService;

@RestController
@RequestMapping(value = "/weixin")
public class WechatOverTimeController {

	private static final Logger logger = LoggerFactory.getLogger(WechatOverTimeController.class);

	@Autowired
	private UserService userService;

	@Autowired
	private OverTimeService overTimeService;

	@Autowired
	private ServicePerformanceService servicePerformanceService;

	@Autowired
	private OrganizationService organizationService;

	@Autowired
	private PendingService pendingService;

	/**
	 * 加班申请 - 初始化
	 * 
	 * @return
	 */
	@RequestMapping(value = "/vacation/overTimeApply/init", method = RequestMethod.POST)
	public Result<Object> ApplicationInit(Long ruFlowId) {
		try {
			List<OrgDto> orgdto = organizationService.findAllOrg();
			Map<String, Object> map = servicePerformanceService.getServicePerformaneAndOverTimeForm(ruFlowId);
			map.put("org", orgdto);
			return new Result<>(SysStatusCodeConst.SUCCESS, map);
		} catch (Exception e) {
			logger.error("初始化失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 加班提交申请
	 * 
	 * @return
	 */
	@RequestMapping(value = "/overTime/application", method = RequestMethod.POST)
	public Result<Object> Application(@ModelAttribute OverTimeForm overTimeForm, Long userId) {
		try {
			User user = userService.getUserById(userId);
			overTimeService.startFlow(overTimeForm, user);
			return new Result<>(SysStatusCodeConst.SUCCESS);
		} catch (Exception e) {
			logger.error("提交申请失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 加班驳回
	 * 
	 * @return
	 */
	@RequestMapping(value = "/overtime/rejectFlow", method = RequestMethod.POST)
	public Result<Object> rejectFlow(Long ruFlow, Long userId) {
		try {
			User user = userService.getUserById(userId);
			pendingService.rejectApply(ruFlow, user);
			return new Result<>(SysStatusCodeConst.SUCCESS);
		} catch (NullPointerException e) {
			return new Result<>(SysStatusCodeConst.SYSERROR);
		} catch (Exception e) {
			logger.error("驳回失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 加班拒絕
	 * 
	 * @return
	 */
	@RequestMapping(value = "/overtime/refuseApply", method = RequestMethod.POST)
	public Result<Object> refuseApply(Long ruFlow, Long userId) {
		try {
			User user = userService.getUserById(userId);
			pendingService.refuseApply(ruFlow, user);
			return new Result<>(SysStatusCodeConst.SUCCESS);
		} catch (NullPointerException e) {
			return new Result<>(SysStatusCodeConst.SYSERROR);
		} catch (Exception e) {
			logger.error("拒絕失败", e);
			throw new RuntimeException(e);
		}
	}
}
