package com.isolver.interfaces.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.FileUtil;
import com.isolver.common.util.HttpUtil;
import com.isolver.common.util.Result;
import com.isolver.form.wechat.FileSaveResultForm;
import com.isolver.interfaces.FileApi;
import com.isolver.service.wechat.FileService;

@RestController
public class FileApiImpl implements FileApi {

	// 。图片临时路径
	private static final String FILEPATH = "C:\\img\\";

	// 。图片存储虚拟路径
	private static final String PICPATH = "http://IS20190075PC:6080/photo/img/";

	@Autowired
	private FileService fileService;

	/**
	 * 文件上传
	 * 
	 * @param file      文件内容
	 * @param fieldId   字段id
	 * @param fieldType 文件类型
	 * @param userId    登录者id
	 * @return
	 * @throws FileNotFoundException m("runProcessId") Long
	 *                               userId, @RequestParam("runProcessId") int
	 *                               fieldFuncti
	 */
	@Override
	public Result<Object> saveOneFiles(MultipartFile[] file, Long userId) throws FileNotFoundException {
		List<FileSaveResultForm> picFormList = FileUtil.createPic(file, FILEPATH, PICPATH);
		// 。压缩文件
		File zipfile = FileUtil.makeZip(FILEPATH + "\\", SysStaticConst.ZIPNAME, SysStaticConst.ZIPPATH);
		// 。调用图片服务器接口
		HttpUtil.postData(SysStaticConst.FILEURL, zipfile);
		Long id = fileService.createFile(picFormList, userId);
		// 。删除源文件
		FileUtil.deleteFile(SysStaticConst.ZIPPATH + SysStaticConst.ZIPNAME);
		return new Result<>(SysStatusCodeConst.SUCCESS, id);
	}

	/**
	 * 文件上传2
	 * 
	 * @param file      文件内容
	 * @param fieldId   字段id
	 * @param fieldType 文件类型
	 * @param userId    登录者id
	 * @return
	 * @throws FileNotFoundException m("runProcessId") Long
	 *                               userId, @RequestParam("runProcessId") int
	 *                               fieldFuncti
	 */
	@Override
	public Result<Object> saveFiles(MultipartFile[] file, Long userId, String ruFlowId) throws FileNotFoundException {
		if (!StringUtils.isEmpty(ruFlowId)) {
			fileService.deleteOldPic(ruFlowId);
		}
		List<FileSaveResultForm> picFormList = FileUtil.createPic(file, FILEPATH, PICPATH);
		// 。压缩文件
		File zipfile = FileUtil.makeZip(FILEPATH + "\\", SysStaticConst.ZIPNAME, SysStaticConst.ZIPPATH);
		// 。调用图片服务器接口
		HttpUtil.postData(SysStaticConst.FILEURL, zipfile);
		Long id = fileService.createFile(picFormList, userId);
		// 。删除源文件
		FileUtil.deleteFile(SysStaticConst.ZIPPATH + SysStaticConst.ZIPNAME);
		return new Result<>(SysStatusCodeConst.SUCCESS, id);
	}

}
