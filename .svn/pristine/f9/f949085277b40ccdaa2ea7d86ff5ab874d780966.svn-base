package com.isolver.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.isolver.common.config.AuthenticationFacade;
import com.isolver.common.constant.HtmlConst;
import com.isolver.common.util.JsonUtil;
import com.isolver.common.util.Result;
import com.isolver.dto.OrgDto;
import com.isolver.dto.ServicePerformanceDto;
import com.isolver.dto.UserDto;
import com.isolver.entity.User;
import com.isolver.form.UnusualAttendanceForm;
import com.isolver.service.OrganizationService;
import com.isolver.service.ServicePerformanceService;
import com.isolver.service.UnusualAttendanceService;
import com.isolver.service.UserService;

@RestController
@RequestMapping(value = "/unusualAttendance")
public class UnusualAttendanceController {

	private static final Logger logger = LoggerFactory.getLogger(UnusualAttendanceController.class);

	@Autowired
	private UserService userService;

	@Autowired
	private OrganizationService organizationService;

	@Autowired
	private ServicePerformanceService servicePerformanceService;

	@Autowired
	private UnusualAttendanceService unusualAttendanceService;

	/**
	 * 非正常初始化数据
	 * 
	 * @return
	 */
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public ModelAndView indexView(String id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("unusualAttendance");
		Long userId = AuthenticationFacade.getUserId();
		User user = userService.getUserById(userId);
		modelAndView.addObject("username", JsonUtil.getJsonArray(new UserDto(user)));
		List<OrgDto> orgdto = organizationService.findAllOrg();
		if (!"undefined".equals(id) && null != id) {
			Long ids = Long.parseLong(id);
			ServicePerformanceDto servicePerformanceDto = servicePerformanceService.findOneServicePerformance(ids);
			modelAndView.addObject("servicePerformance", JsonUtil.getJsonArray(servicePerformanceDto));
		}
		modelAndView.addObject("orgdto", JsonUtil.getJsonArray(orgdto));
		modelAndView.addObject("html", HtmlConst.SUBMMITBUTTON);
		modelAndView.addObject("type", HtmlConst.APPLICATION);
		return modelAndView;

	}

	
	/**
	 * 休假初始化数据（审批页面）
	 * 
	 * @return
	 */
	@RequestMapping(value = "/pending", method = RequestMethod.GET)
	public ModelAndView indexView2(String ruFlowId) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("unusualAttendance");
		Long userId = AuthenticationFacade.getUserId();
		User user = userService.getUserById(userId);
		modelAndView.addObject("username", JsonUtil.getJsonArray(new UserDto(user)));
		List<OrgDto> orgdto = organizationService.findAllOrg();
		modelAndView.addObject("orgdto", JsonUtil.getJsonArray(orgdto));
		if (!"undefined".equals(ruFlowId) && null != ruFlowId) {
			Long ids = Long.parseLong(ruFlowId);
			Map<String, Object> map = servicePerformanceService.getServicePerformaneAndUnusualAttendanceForm(ids);
			modelAndView.addObject("unusualAttendance", JsonUtil.getJsonArray(map.get("unusualAttendance")));
			modelAndView.addObject("servicePerformance", JsonUtil.getJsonArray(map.get("servicePerformanceDto")));
			modelAndView.addObject("ruFlowId", ruFlowId);
		}
		modelAndView.addObject("html", HtmlConst.PENDINGBUTTON);
		modelAndView.addObject("type", HtmlConst.PENDING);
		return modelAndView;

	}
	
	/**
	 * 非正常提交申请
	 * 
	 * @return
	 */
	@RequestMapping(value = "/application", method = RequestMethod.POST)
	public Result<Object> Application(@ModelAttribute UnusualAttendanceForm unusualAttendanceForm) {
		try {
			Long id = AuthenticationFacade.getUserId();
			User user = userService.getUserById(id);
			unusualAttendanceService.startFlow(unusualAttendanceForm, user);
			return new Result<>();
		} catch (Exception e) {
			logger.error("提交申请失败", e);
			throw new RuntimeException(e);
		}
	}
}
