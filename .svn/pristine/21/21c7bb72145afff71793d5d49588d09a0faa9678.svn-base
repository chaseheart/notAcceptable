package com.isolver.dao.unusualAttendance;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.isolver.dto.ApplicationDto;
import com.isolver.dto.PendingDto;
import com.isolver.dto.wechat.PendingDtoWechat;
import com.isolver.entity.RuFlow;
import com.isolver.entity.UnusualAttendance;
import com.isolver.entity.User;

/**
 * @author IS1907005
 * @date 2019/11/18
 * @class UnusualAttendanceRepository.java
 */
@Repository
public interface UnusualAttendanceRepository extends JpaRepository<UnusualAttendance, Long> {

	/**
	 * 检索自己提出的所有申请
	 * 
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	@Query("select new com.isolver.dto.ApplicationDto(CONCAT(a.ruFlow.id,'' )as appId, CONCAT(a.unusualAttendanceType,'' ) as typeDetail,"
			+ " CONCAT(a.unusualAttendanceDate,'' ) as appStart, CONCAT(a.unusualAttendanceDate,'' ) as appEnd, CONCAT(a.ruFlow.dealPeople.username,'' ) as assigner, "
			+ " CONCAT(a.reason,'' ) as content , CONCAT(a.ruFlow.state,'' ) as state )" + " from UnusualAttendance a where a.user = :user and a.unusualAttendanceDate Between :startTime and :endTime")
	public List<ApplicationDto> findApplicationDtoByUnusualAttendanceDateBetween(@Param("startTime") Timestamp startTime,@Param("endTime") Timestamp endTime,@Param("user") User user);

	/**
	 * 检索所有待处理申请
	 * 
	 * @param dealPeople
	 * @param deleteFlag
	 * @return
	 */
	@Query("select new com.isolver.dto.PendingDto(CONCAT(a.ruFlow.id,'' )as appId, "
			+ " CONCAT(a.user.username,'' ) as appUsername, CONCAT(a.ruFlow.insertTime,'' ) as appStartTime, CONCAT(a.ruFlow.dealPeopleNow.username,'' ) as dealPeople, "
			+ " CONCAT(a.ruFlow.updateTime,'' ) as appEndtTime )"
			+ " from UnusualAttendance a where a.ruFlow.dealPeople= :dealPeople and a.ruFlow.deleteFlag = :deleteFlag and a.user.username like :username and a.user.workId like :workId and a.ruFlow.state > 1 and a.ruFlow.state < 4")
	public List<PendingDto> findApplicationDtoByUndo(@Param("dealPeople") User dealPeople,@Param("deleteFlag") Boolean deleteFlag,@Param("workId") String workId,@Param("username") String username);

	/**
	 * 根据运行流程申请ID检索 休假申请详情
	 * 
	 * @param ruFlow
	 * @return
	 */
	public UnusualAttendance findByRuFlow(RuFlow ruFlow);
	
	@Query("select new com.isolver.dto.wechat.PendingDtoWechat(CONCAT(a.ruFlow.id,'' ) as appId,  CONCAT(a.ruFlow.updateTime,'' ) as appEndTime, '非正常考勤申请' as appName, (case when a.ruFlow.state = 1 then '再申请' when a.ruFlow.state = 2  or a.ruFlow.state = 3 then '审批中' end) as appstate, CONCAT(a.ruFlow.insertTime,'' ) as appStartTime) from UnusualAttendance a where a.user = :user and a.ruFlow.deleteFlag = :deleteFlag and a.ruFlow.state < :state and a.ruFlow.state > 0"  )
	public List<PendingDtoWechat> getDataByUser(@Param("user") User user, @Param("deleteFlag") Boolean deleteFlag, @Param("state") Integer state);
	
	/**
	 * 根据用户和消除flag检索申请历史
	 * 
	 * @param user
	 * @param deleteFlag
	 * @return
	 */
	@Query(" SELECT a FROM UnusualAttendance a WHERE a.user = :user AND a.deleteFlag = :deleteFlag AND (a.ruFlow.state = 4 OR a.ruFlow.state = 0)")
	public List<UnusualAttendance> findByUserAndDeleteFlagEnd(@Param("user") User user,@Param("deleteFlag") Boolean deleteFlag);
}
