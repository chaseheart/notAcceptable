package com.isolver.controller.wechat;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.FileUtil;
import com.isolver.common.util.HttpUtil;
import com.isolver.common.util.Result;
import com.isolver.form.wechat.FileSaveResultForm;
import com.isolver.service.wechat.FileService;

/**
 * 文件上传
 * 
 * @author IS1907005
 * @date 2019/08/19
 * @class FileController.java
 */
@RestController
@RequestMapping(value = "/weixin")
public class FileController {

	// 图片临时路径
	private static final String FILEPATH = "C:\\img\\";

	// 图片存储虚拟路径
	private static final String PICPATH = "http://IS20190075PC:6080/photo/img/";

	private static final Logger logger = LoggerFactory.getLogger(FileController.class);

	@Autowired
	private FileService fileService;

	/**
	 * 文件上传
	 * 
	 * @param file      文件内容
	 * @param fieldId   字段id
	 * @param fieldType 文件类型
	 * @param userId    登录者id
	 * @return
	 * @throws FileNotFoundException m("runProcessId") Long
	 *                               userId, @RequestParam("runProcessId") int
	 *                               fieldFuncti
	 */
	@RequestMapping(method = RequestMethod.POST, value = "/saveOneFiles")
	@ResponseBody
	public Result<Object> saveOneFiles(@RequestParam("file") MultipartFile[] file, Long userId)
			throws FileNotFoundException {

		try {

			List<FileSaveResultForm> picFormList = FileUtil.createPic(file, FILEPATH, PICPATH);
			// 压缩文件
			File zipfile = FileUtil.makeZip(FILEPATH + "\\", SysStaticConst.ZIPNAME, SysStaticConst.ZIPPATH);
			// 调用图片服务器接口
			HttpUtil.postData(SysStaticConst.FILEURL, zipfile);
			// 符号'/'位置
//			int sign = 0;
//			FileSaveResultForm picForm;
			// 排除已存在的图片进行新增
//			picForm = new FileSaveResultForm(picId[i].substring(sign, picId[i].length()).replace("resize", ""), picId[i].substring(0, sign), "", "");
//			picFormList.add(picForm);
			Long id = fileService.createFile(picFormList, userId);
//			// 删除源文件
			FileUtil.deleteFile(SysStaticConst.ZIPPATH + SysStaticConst.ZIPNAME);
			return new Result<>(SysStatusCodeConst.SUCCESS, id);
		} catch (Exception e) {
			logger.error("新增失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 文件上传2
	 * 
	 * @param file      文件内容
	 * @param fieldId   字段id
	 * @param fieldType 文件类型
	 * @param userId    登录者id
	 * @return
	 * @throws FileNotFoundException m("runProcessId") Long
	 *                               userId, @RequestParam("runProcessId") int
	 *                               fieldFuncti
	 */
	@RequestMapping(method = RequestMethod.POST, value = "/saveFiles")
	@ResponseBody
	public Result<Object> saveFiles(@RequestParam("file") MultipartFile[] file, Long userId, String ruFlowId)
			throws FileNotFoundException {

		try {
			if (ruFlowId != null && !"".equals(ruFlowId)) {
				fileService.deleteOldPic(ruFlowId);
			}
			List<FileSaveResultForm> picFormList = FileUtil.createPic(file, FILEPATH, PICPATH);
			// 压缩文件
			File zipfile = FileUtil.makeZip(FILEPATH + "\\", SysStaticConst.ZIPNAME, SysStaticConst.ZIPPATH);
			// 调用图片服务器接口
			HttpUtil.postData(SysStaticConst.FILEURL, zipfile);
			// 符号'/'位置
			Long id = fileService.createFile(picFormList, userId);
//			// 删除源文件
			FileUtil.deleteFile(SysStaticConst.ZIPPATH + SysStaticConst.ZIPNAME);
			return new Result<>(SysStatusCodeConst.SUCCESS, id);
		} catch (Exception e) {
			logger.error("新增失败", e);
			throw new RuntimeException(e);
		}
	}
}
