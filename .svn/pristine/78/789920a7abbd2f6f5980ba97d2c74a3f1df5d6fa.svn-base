package com.isolver.dao.servicePerformance.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.SQLQuery;
import org.hibernate.transform.Transformers;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.util.Dateutil;
import com.isolver.dao.servicePerformance.ServicePerformanceRepositoryCustom;
import com.isolver.dto.SPAppCountDto;
import com.isolver.dto.ServicePerformanceDto;
import com.isolver.dto.WorkSearchDto;
import com.isolver.dto.wechat.WechatServicePerformanceDto;
import com.isolver.entity.User;
import com.isolver.form.WorkConditionForm;

/**
 * @author IS1907005
 * @date 2019/11/08
 * @class ServicePerformanceRepositoryImpl.java
 */
@SuppressWarnings("unchecked")
public class ServicePerformanceRepositoryImpl implements ServicePerformanceRepositoryCustom {

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * 检索当月考勤记录
	 * 
	 * @param 用户ID
	 * @param 开始时间
	 * @param 结束时间
	 * @param 删除标识
	 */
	public List<ServicePerformanceDto> findServicePerformanceByUserAndDeleteFlag(User user, Date monthStart, Date monthEnd, Boolean deleteFlag) {
		List<ServicePerformanceDto> spDto = new ArrayList<>();
		String sql = "";
		sql += "SELECT "
				+ "	CONCAT( a.id, '' ) AS id, " 
				+ "	CONCAT( a.day, '' ) AS day, " 
				+ "	CONCAT( a.oa_start, '' ) AS oaStart, " 
				+ "	CONCAT( a.oa_end, '' ) AS oaEnd, "
				+ "	CONCAT( a.oa_final_start, '' ) AS oaFinalStart, " 
				+ "	CONCAT( a.oa_final_end, '' ) AS oaFinalEnd, " 
				+ "	CONCAT( a.version, '' ) AS version, "
				+ "	CONCAT(  TIMESTAMPDIFF( HOUR, a.oa_final_start, CASE WHEN oa_final_end < :day THEN oa_final_end ELSE :day END ), ''  ) AS hour, " 
				+ "	CONCAT( " + "CASE WHEN oa_final_start BETWEEN '09:00:00'  "
				+ "	AND '09:30:00'  "
				+ "	AND TIMESTAMPDIFF( HOUR, a.oa_start, a.oa_end ) >= 9  "
				+ "	AND oa_final_end BETWEEN '18:00:00'  "
				+ "	AND '18:30:00' "
				+ " AND not FIND_IN_SET("
				+ "				CONCAT( '\"', DATE_FORMAT( a.DAY, '%d' ), '\"' ),"
				+ "				("
				+ "				SELECT"
				+ "					h.rest_day "
				+ "				FROM"
				+ "					holiday h "
				+ "				WHERE"
				+ "					CONCAT( h.YEAR, '/', h.`month`, '/1' ) BETWEEN :monthStart1 "
				+ "					AND :monthEnd1 "
				+ "					AND h.type = :type "
				+ "				) "
				+ "			) THEN " 
				+ "		'n'  " 
				+ "		WHEN oa_final_start BETWEEN '09:00:00'  " 
				+ "		AND '09:30:00'  " 
				+ "		AND oa_final_end BETWEEN '20:00:00'  "
				+ "		AND '23:59:00' OR ("
				+ "			oa_final_start IS NOT NULL " 
				+ "			AND oa_final_end IS NOT NULL " 
				+ "			AND FIND_IN_SET("
				+ "				CONCAT( '\"', DATE_FORMAT( a.DAY, '%d' ), '\"' )," 
				+ "				(" 
				+ "				SELECT" 
				+ "					h.rest_day " 
				+ "				FROM"
				+ "					holiday h " 
				+ "				WHERE" 
				+ "					CONCAT( h.YEAR, '/', h.`month`, '/1' ) BETWEEN :monthStart1 " 
				+ "					AND :monthEnd1 "
				+ "					AND h.type = :type " 
				+ "				) " 
				+ "			) " + "			) THEN "
				+ "			'o'  " 
				+ "			WHEN oa_final_start NOT BETWEEN '09:00:00'  " 
				+ "			AND '09:30:00'  "
				+ "			AND oa_final_end BETWEEN '20:00:00'  "
				+ "			AND '23:59:00'"
				+ " AND not FIND_IN_SET("
				+ "				CONCAT( '\"', DATE_FORMAT( a.DAY, '%d' ), '\"' ),"  
				+ "				("  
				+ "				SELECT"  
				+ "					h.rest_day "  
				+ "				FROM"  
				+ "					holiday h "  
				+ "				WHERE"  
				+ "					CONCAT( h.YEAR, '/', h.`month`, '/1' ) BETWEEN :monthStart1 "  
				+ "					AND :monthEnd1 "  
				+ "					AND h.type = :type "  
				+ "				) "  
				+ "			) THEN " 
				+ "				'uo'"
				+ "				WHEN oa_final_start is null "
				+ "				AND oa_final_end is null " 
				+ "				AND FIND_IN_SET(" 
				+ "					CONCAT( '\"', DATE_FORMAT( a.DAY, '%d' ), '\"' )," 
				+ "					("
				+ "					SELECT" 
				+ "						h.rest_day " 
				+ "					FROM" 
				+ "						holiday h " 
				+ "					WHERE"
				+ "						CONCAT( h.YEAR, '/', h.`month`, '/1' ) BETWEEN :monthStart1 " 
				+ "						AND :monthEnd1 " 
				+ "						AND h.type = :type "
				+ "					) " 
				+ "					) THEN" 
				+ "					'k' ELSE 'u'  " 
				+ "			END, " 
				+ "			''  "
				+ "		) AS state  " 
				+ "FROM " + "service_performance a" 
				+ "	WHERE" + "	a.user = :user " 
				+ "	AND a.day BETWEEN :monthStart AND :monthEnd "
				+ "	AND a.delete_flag = :deleteFlag"
				+ " ORDER BY a.day ";

		Query query = entityManager.createNativeQuery(sql);
		query.setParameter("user", user.getId());
		query.setParameter("monthStart1", Dateutil.getDate(monthStart).replaceAll("-", "/"));
		query.setParameter("monthEnd1", Dateutil.getDate(monthEnd).replaceAll("-", "/"));
		query.setParameter("monthStart", monthStart);
		query.setParameter("monthEnd", monthEnd);
		query.setParameter("deleteFlag", deleteFlag);
		query.setParameter("type", user.getHolidayType());
		query.setParameter("day", Dateutil.getLocalDate() + " 18:30:00");
		query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(ServicePerformanceDto.class));
		spDto = query.getResultList();
		return spDto;
	}

	public WechatServicePerformanceDto findServicePerformanceById(User user, Long id, Boolean deleteFlag) {
		WechatServicePerformanceDto spDto = new WechatServicePerformanceDto();
		String sql = "";
		sql += "SELECT " 
				+ "	CONCAT( a.id, '' ) AS id, " 
				+ "	CONCAT( a.day, '' ) AS day, "
				+ "	CONCAT( a.oa_start, '' ) AS oaStart, " 
				+ "	CONCAT( a.oa_end, '' ) AS oaEnd, "
				+ "	CONCAT( a.oa_final_start, '' ) AS oaFinalStart, " 
				+ "	CONCAT( a.oa_final_end, '' ) AS oaFinalEnd, "
				+ "	CONCAT(  TIMESTAMPDIFF( HOUR, a.oa_start, CASE WHEN oa_final_end < :day THEN oa_final_end ELSE :day END ), ''  ) AS hour, " 
				+ "	CONCAT( "
				+ "CASE " 
				+ "	 "
				+ "	WHEN oa_final_start BETWEEN '09:00:00'  " 
				+ "	AND '09:30:00'  " 
				+ "	AND TIMESTAMPDIFF( HOUR, a.oa_start, a.oa_end ) >= 9  " 
				+ "	AND oa_final_end BETWEEN '18:00:00'  "
				+ "	AND '18:30:00' THEN " 
				+ "		'n'  " 
				+ "		WHEN oa_final_start BETWEEN '09:00:00'  " 
				+ "		AND '09:30:00'  "
				+ "		AND oa_final_end BETWEEN '20:00:00'  "
				+ "		AND '23:59:00' THEN "
				+ "			'o'  " 
				+ "			WHEN oa_final_start NOT BETWEEN '09:00:00'  " 
				+ "			AND '09:30:00'  "
				+ "			AND oa_final_end BETWEEN '20:00:00'  " 
				+ "			AND '23:59:00' THEN " 
				+ "				'uo' ELSE 'u'  " 
				+ "			END, "
				+ "			''  "
				+ "		) AS state,  " 
				+ "  CONCAT( b.work_id, '' ) AS workId, " 
				+ "  CONCAT( b.username, '' ) AS username " 
				+ "FROM " 
				+ "service_performance a " 
				+ "left join user b on b.id = a.user "
				+ "	WHERE" 
				+ "	a.user = :user " 
				+ "	and a.id = :id " 
				+ "	AND a.delete_flag = :deleteFlag" 
				+ " ORDER BY a.day ";

		Query query = entityManager.createNativeQuery(sql);
		query.setParameter("user", user);
		query.setParameter("id", id);
		query.setParameter("deleteFlag", deleteFlag);
		query.setParameter("day", Dateutil.getLocalDate() + " 18:30:00");
		query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(WechatServicePerformanceDto.class));
		spDto = (WechatServicePerformanceDto) query.getResultList().get(0);
		return spDto;
	}

	public List<WorkSearchDto> getAllWorkSearchDto(Date startDate,Date endDate,WorkConditionForm workConditionForm){
		
		String sql = "";
		sql +=	"SELECT " + 
				"	CONCAT(b.work_id,'') AS workId, " + 
				"	CONCAT(b.username,'') AS username, " + 
				"	CONCAT(c.depart_name,'') AS departName, " + 
				"	CONCAT(IFNULL( d.overHour, '0' ),'') AS overtimeHour, " + 
				"	CONCAT(IFNULL( e.times, '0' ),'') AS unusualTime, " + 
				"	CONCAT(IFNULL( f.absTime, '0' ),'') AS lackHour, " + 
				"	CONCAT(IFNULL( g.plAbsence, '0' ),'') AS plDay, " + 
				"	CONCAT(IFNULL( h.slAbsence, '0' ),'') AS slDay, " + 
				"	CONCAT(i.annual_leave,'') AS annualLeave, " + 
				"	CONCAT(ho.hoSum,'') AS performanceActual, " + 
				"	CONCAT(i.paid_leave,'') AS paidLeave " + 
				"FROM " + 
				"	`user` b " + 
				"	LEFT JOIN department c ON b.depart = c.id " + 
				"	LEFT JOIN organization o ON o.id = c.org " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	SUM( TIMESTAMPDIFF( HOUR, wo.work_overtime_start, wo.work_overtime_end ) ) AS overHour, " + 
				"	wo.`user` AS id  " + 
				"FROM " + 
				"	work_overtime wo " + 
				"	LEFT JOIN ru_flow rf ON wo.ru_flow_id = rf.id  " + 
				"WHERE " + 
				"	rf.state = 4  " + //
				"	AND wo.work_overtime_date BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"GROUP BY " + 
				"	wo.`user`  " + 
				"	) d ON b.id = d.id " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	count( * ) AS times, " + 
				"	u.id  " + 
				"FROM " + 
				"	unusual_attendance ua " + 
				"	LEFT JOIN ru_flow rf ON ua.ru_flow_id = rf.id " + 
				"	LEFT JOIN `user` u ON ua.`user` = u.id  " + 
				"WHERE " + 
				"	rf.state = 4  " + 
				"	AND ua.unusual_attendance_date BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"GROUP BY " + 
				"	u.id  " + 
				"	) e ON b.id = e.id " + 
				"	LEFT JOIN ( "
				+ "SELECT" + 
				"	a.USER as `user`," + 
				"	sum(" + 
				"CASE" + 
				"	" + 
				"	WHEN NOT FIND_IN_SET(" + 
				"	CONCAT( '\"', SUBSTRING_INDEX ( a.DAY, \"-\",- 1 ), '\"' )," + 
				"	( SELECT h.rest_day FROM holiday h WHERE h.`month` = 11 AND h.`year` = 2019 AND h.type = 0 ) " + 
				"	) > 0 THEN" + 
				"		( 9- TIMESTAMPDIFF( HOUR, a.oa_final_start, CASE WHEN oa_final_end < '20:00:00' THEN oa_final_end ELSE '18:30:00' END ) ) ELSE 0 " + 
				"	END " + 
				"	) as absTime " + 
				"FROM" + 
				"	service_performance a " + 
				"WHERE " + 
				"	a.DAY BETWEEN :startDate   " + 
				"	AND :endDate   " + 
				"GROUP BY" + 
				"	a.USER "
				+ ") AS f ON f.user = b.id " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	FLOOR( SUM( TIMESTAMPDIFF( HOUR, va.vacation_start, va.vacation_end ) ) / 4 ) / 2 AS plAbsence, " + 
				"	u.id  " + 
				"FROM " + 
				"	vacation va " + 
				"	LEFT JOIN ru_flow rf ON va.ru_flow_id = rf.id " + 
				"	LEFT JOIN `user` u ON va.`user` = u.id  " + 
				"WHERE " + 
				"	rf.state = 4  " + 
				"	AND va.vacation_type = u.holiday_type  " + 
				"	AND va.vacation_start BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"GROUP BY " + 
				"	u.id  " + 
				"	) g ON g.id = b.id " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	FLOOR( SUM( TIMESTAMPDIFF( HOUR, va.vacation_start, va.vacation_end ) ) / 4 ) / 2 AS slAbsence, " + 
				"	u.id  " + 
				"FROM " + 
				"	vacation va " + 
				"	LEFT JOIN ru_flow rf ON va.ru_flow_id = rf.id " + 
				"	LEFT JOIN `user` u ON va.`user` = u.id  " + 
				"WHERE " + 
				"	rf.state = 4  " + 
				"	AND va.vacation_type = u.holiday_type   " + 
				"	AND va.vacation_start BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"GROUP BY " + 
				"	u.id  " + 
				"	) h ON h.id = b.id " + 
				"	LEFT JOIN vacation_record i ON i.user_id = b.id AND i.date BETWEEN :startDate AND :endDate " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	u.id, " + 
				"	( sum( " + 
				"	TIMESTAMPDIFF( " + 
				"	HOUR, " + 
				"	CONCAT( '2010/10/10 ', sp.oa_final_start ), " + 
				"	CONCAT( '2010/10/10 ', CASE WHEN sp.oa_final_end > '18:00:00' THEN '18:00:00' ELSE sp.oa_final_end END )  " + 
				"	)  " + 
				"	) - ho.hoSum ) AS hoSum  " + 
				"FROM " + 
				"	service_performance sp " + 
				"	LEFT JOIN `user` u ON sp.`user` = u.id " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	u.id, " + 
				"	SUM( " + 
				"	TIMESTAMPDIFF( " + 
				"	HOUR, " + 
				"	CONCAT( '2010/10/10 ', sp.oa_final_start ), " + 
				"	CONCAT( '2010/10/10 ', CASE WHEN sp.oa_final_end > '18:00:00' THEN '18:00:00' ELSE sp.oa_final_end END )  " + 
				"	)  " + 
				"	) AS hoSum  " + 
				"FROM " + 
				"	service_performance sp " + 
				"	LEFT JOIN `user` u ON sp.`user` = u.id  " + 
				"WHERE " + 
				"	FIND_IN_SET( " + 
				"	CONCAT( '\"', DATE_FORMAT( sp.DAY, '%d' ), '\"' ), " + 
				"	( " + 
				"SELECT " + 
				"	h.rest_day  " + 
				"FROM " + 
				"	holiday h  " + 
				"WHERE " + 
				"	CONCAT( h.YEAR, '-', h.`month`, '-1' ) BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"	AND h.type = u.holiday_type  " + 
				"	)  " + 
				"	)  " + 
				"	AND sp.`day` BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"GROUP BY " + 
				"	u.id  " + 
				"	) ho ON ho.id = u.id  " + 
				"WHERE " + 
				"	sp.`day` BETWEEN :startDate  " + 
				"	AND :endDate  " + 
				"GROUP BY " + 
				"	u.id, " + 
				"	ho.hoSum  " + 
				"	) ho ON ho.id = b.id  " + 
				"WHERE " + 
				"	b.delete_flag = :deletaFlag " ;
		if (!workConditionForm.getWorkId().equals("0")) {
			sql += "	AND b.work_id LIKE :workId ";
		}
		if (!workConditionForm.getUser().equals("0")) {
			sql += "	AND b.username LIKE :username ";
		}
		if (!StringUtils.isEmpty(workConditionForm.getDepart()) && !workConditionForm.getDepart().equals("0")) {
			sql += "	AND b.depart = :depart ";
		}
		if (!StringUtils.isEmpty(workConditionForm.getOrg()) && !workConditionForm.getOrg().equals("0")) {
			sql += "	AND o.id = :org ";
		}

		Query query = entityManager.createNativeQuery(sql);
		query.setParameter("startDate", Dateutil.getDate(startDate));
		query.setParameter("endDate", Dateutil.getDate(endDate));
		query.setParameter("deletaFlag", SysStaticConst.NOTDELE);
		if (!workConditionForm.getWorkId().equals("0")) {
			query.setParameter("workId", "%" + workConditionForm.getWorkId() + "%");
		}
		if (!workConditionForm.getUser().equals("0")) {
			query.setParameter("username", "%" + workConditionForm.getUser() + "%");
		}
		if (!StringUtils.isEmpty(workConditionForm.getDepart()) && !workConditionForm.getDepart().equals("0")) {
			query.setParameter("depart", workConditionForm.getDepart());
		}
		if (!StringUtils.isEmpty(workConditionForm.getOrg()) && !workConditionForm.getOrg().equals("0")) {
			query.setParameter("org", workConditionForm.getOrg());
		}
		// WorkSearchDto
		query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(WorkSearchDto.class));
		List<WorkSearchDto> workSearchDto = query.getResultList();
		return workSearchDto;
	}
	
	/**
	 * 检索一条考勤记录对应的申请数量
	 * 
	 * @param user
	 * @param day
	 * @return*/
	public List<SPAppCountDto> findAppTimesFromApplication(Date startDate,Date endDate,Long user,String state){
		List<SPAppCountDto>  listDto = new ArrayList<>();
		String sql = "";
		sql += "SELECT " + 
				"	CONCAT(a.day , '') AS day " + 
				"	,IFNULL(CONCAT(b.cou , ''), '0') AS vacationApp " + 
				"	,IFNULL(CONCAT(c.cou , ''), '0') AS unusualAttendanceApp " + 
				"	,IFNULL(CONCAT(d.cou , ''), '0') AS workOvertimeApp " + 
				"FROM " + 
				"	service_performance a " + 
				"	LEFT JOIN ( " + 
				"SELECT " + 
				"	s.DAY, " + 
				"	count( * ) AS cou  " + 
				"FROM " + 
				"	vacation v " + 
				"	INNER JOIN ru_flow r ON r.id = v.ru_flow_id " + 
				"	LEFT JOIN service_performance s ON s.id = v.service_performance  " + 
				"WHERE " + 
				"	r.state <> :state  " + 
				"	AND s.`day` BETWEEN :startDate  " + 
				"	AND :endDate " + 
				"	AND s.`user` = :user "+
				"GROUP BY " + 
				"	s.`day`  " + 
				"	) b ON a.DAY = b. " + 
				"	DAY LEFT JOIN ( " + 
				"SELECT " + 
				"	s.DAY, " + 
				"	count( * ) AS cou  " + 
				"FROM " + 
				"	unusual_attendance u " + 
				"	INNER JOIN ru_flow r ON r.id = u.ru_flow_id " + 
				"	LEFT JOIN service_performance s ON s.id = u.service_performance  " + 
				"WHERE " + 
				"	r.state <> :state  " + 
				"	AND s.`day` BETWEEN :startDate  " + 
				"	AND :endDate " + 
				"	AND s.`user` = :user "+
				"GROUP BY " + 
				"	s.`day`  " + 
				"	) c ON a.DAY = c. " + 
				"	DAY LEFT JOIN ( " + 
				"SELECT " + 
				"	s.DAY, " + 
				"	count( * ) AS cou  " + 
				"FROM " + 
				"	work_overtime w " + 
				"	INNER JOIN ru_flow r ON r.id = w.ru_flow_id " + 
				"	LEFT JOIN service_performance s ON s.id = w.service_performance  " + 
				"WHERE " + 
				"	r.state <> :state  " + 
				"	AND s.`day` BETWEEN :startDate  " + 
				"	AND :endDate " + 
				"	AND s.`user` = :user "+
				"GROUP BY " + 
				"	s.`day`  " + 
				"	) d ON a.DAY = d.DAY  " + 
				"WHERE " + 

				"b.cou IS NOT NULL OR C.cou IS NOT NULL OR D.cou IS NOT NULL " + 
				"ORDER BY " + 
				"	a.id";

		Query query = entityManager.createNativeQuery(sql);
		query.setParameter("user", user);
		query.setParameter("state", state);
		query.setParameter("startDate", startDate);
		query.setParameter("endDate", endDate);
		query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(SPAppCountDto.class));
		listDto = (List<SPAppCountDto>) query.getResultList();
		return listDto;
	}
}
