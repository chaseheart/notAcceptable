package com.isolver.common.util;

import java.util.Collection;
import java.util.List;

import org.activiti.bpmn.model.FlowElement;
import org.activiti.bpmn.model.Process;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.ProcessEngine;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.PvmActivity;
import org.activiti.engine.impl.pvm.PvmTransition;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskQuery;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * activiti工具类
 * @author IS1907006
 *
 */
public class ActivitiUtil {
	
	private static final Logger logger = LoggerFactory.getLogger(ActivitiUtil.class);


	/**
	 * 获取当前流程的下一个节点
	 * 
	 * @param procInstanceId
	 * @return
	 */
	public static String getNextNode(String procInstanceId) {
		ProcessEngine processEngine = ProcessEngineUtil.getProcessEngine();
		// 1、首先是根据流程ID获取当前任务：
		List<Task> tasks = processEngine.getTaskService().createTaskQuery().processInstanceId(procInstanceId).list();
		String nextId = "";
		for (Task task : tasks) {
			RepositoryService rs = processEngine.getRepositoryService();
			// 2、然后根据当前任务获取当前流程的流程定义，然后根据流程定义获得所有的节点：
			ProcessDefinitionEntity def = (ProcessDefinitionEntity) ((RepositoryServiceImpl) rs)
					.getDeployedProcessDefinition(task.getProcessDefinitionId());
			List<ActivityImpl> activitiList = def.getActivities(); // rs是指RepositoryService的实例
			// 3、根据任务获取当前流程执行ID，执行实例以及当前流程节点的ID：
			String excId = task.getExecutionId();
			RuntimeService runtimeService = processEngine.getRuntimeService();
			ExecutionEntity execution = (ExecutionEntity) runtimeService.createExecutionQuery().executionId(excId)
					.singleResult();
			String activitiId = execution.getActivityId();
			// 4、然后循环activitiList
			// 并判断出当前流程所处节点，然后得到当前节点实例，根据节点实例获取所有从当前节点出发的路径，然后根据路径获得下一个节点实例：
			for (ActivityImpl activityImpl : activitiList) {
				String id = activityImpl.getId();
				if (activitiId.equals(id)) {
					logger.debug("当前任务：" + activityImpl.getProperty("name")); // 输出某个节点的某种属性
					List<PvmTransition> outTransitions = activityImpl.getOutgoingTransitions();// 获取从某个节点出来的所有线路
					for (PvmTransition tr : outTransitions) {
						PvmActivity ac = tr.getDestination(); // 获取线路的终点节点
						logger.debug("下一步任务任务：" + ac.getProperty("name"));
						nextId = ac.getId();
					}
					break;
				}
			}
		}
		return nextId;
	}
	
	/**
	 * 获取流程所有usertask数量
	 * @param processDefinitionKey activiti实例id
	 * @return
	 */
	public static Integer getAllStepNum(String processDefinitionKey) {
		Integer num = 0;
		ProcessEngine processEngine = ProcessEngineUtil.getProcessEngine();
		// 获取流程定义集合
		List<ProcessDefinition> processDefinitionList = processEngine.getRepositoryService()
				.createProcessDefinitionQuery().processDefinitionKey(processDefinitionKey).orderByProcessDefinitionVersion().desc().list();
		Process process = processEngine.getRepositoryService().getBpmnModel(processDefinitionList.get(0).getId()).getProcesses().get(0);
		Collection<FlowElement> elementlist = process.getFlowElements();
		for (FlowElement a : elementlist) {
			if (a.getId().startsWith("userTask")) {
				num ++;
			}
		}
		return num;
	}

}
