package com.isolver.controller;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.ObjectOptimisticLockingFailureException;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.isolver.common.config.MessageSourceHandler;
import com.isolver.common.constant.FunctionNumConst;
import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.JsonUtil;
import com.isolver.common.util.Result;
import com.isolver.entity.Holiday;
import com.isolver.form.HolidayManagerForm;
import com.isolver.service.HolidayManageService;
import org.apache.commons.lang.StringUtils;

@RestController
@RequestMapping(value = "/holidayManage")
public class HolidayManageController {

	private static final Logger logger = LoggerFactory.getLogger(HolidayManageController.class);

	private static final String TABLENAME = "holiday";
	@Autowired
	private HolidayManageService holidayManageService;
	@Autowired
	private MessageSourceHandler messageSourceHandler;
	/** 乐观锁 **/
	private static final String OPTIMISTICLOCKINGFAILUREEXCEPTION = "ObjectOptimisticLockingFailureException";

	/**
	 * main初始化数据
	 * 
	 * @return
	 */
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public ModelAndView indexView() {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("holidayManage");
		Calendar cal = Calendar.getInstance();
		int lastDay = cal.getActualMaximum(Calendar.DATE);
		Holiday holiday = holidayManageService.findOneMonth(SysStaticConst.CHINA, cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1);
		modelAndView.addObject("holiday", JsonUtil.getJsonArray(holiday));
		modelAndView.addObject("month", lastDay);
		return modelAndView;

	}

	/**
	 * 。检索假期
	 * 
	 * @return
	 */
	@RequestMapping(value = "/searchHoliday", method = RequestMethod.POST)
	public Result<Object> searchHoliday(@ModelAttribute HolidayManagerForm holidayManagerForm) {
		try {
			Calendar cal = Calendar.getInstance();
			cal.set(Calendar.MONTH, holidayManagerForm.getMonth());
			cal.set(Calendar.YEAR, holidayManagerForm.getYear());
			int lastDay = cal.getActualMaximum(Calendar.DATE);
			Holiday holiday = holidayManageService.findOneMonth(holidayManagerForm.getCountry().equals("0") ? SysStaticConst.CHINA : SysStaticConst.JAPAN, cal.get(Calendar.YEAR),
					cal.get(Calendar.MONTH) + 1);
			Map<String, Object> map = new HashMap<>();
			map.put("lastDay", lastDay);
			map.put("holiday", holiday);
			return new Result<>(map);
		} catch (Exception e) {
			logger.error("检索失败", e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 。保存假期
	 * 
	 * @return
	 */
	@RequestMapping(value = "/saveHoliday", method = RequestMethod.POST)
	public Result<Object> saveHoliday(@ModelAttribute HolidayManagerForm holidayManagerForm) {
		try {
			holidayManageService.saveHoliday(holidayManagerForm.getYear(), holidayManagerForm.getMonth() + 1, "[" + holidayManagerForm.getHoliday() + "]",
					holidayManagerForm.getCountry().equals("0") ? SysStaticConst.CHINA : SysStaticConst.JAPAN);
			return new Result<>();
		} catch (ObjectOptimisticLockingFailureException e) {
			logger.error("更新失败，已被其他人更新", e);
			return new Result<>(SysStatusCodeConst.LOCKUP_VALID, messageSourceHandler.getMessage(FunctionNumConst.AT000013, TABLENAME, OPTIMISTICLOCKINGFAILUREEXCEPTION), StringUtils.EMPTY);
		} catch (Exception e) {
			logger.error("检索失败", e);
			throw new RuntimeException(e);
		}
	}

}
