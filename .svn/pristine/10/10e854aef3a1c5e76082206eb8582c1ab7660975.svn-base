package com.isolver.service;

import java.sql.Timestamp;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.util.ProcessEngineUtil;
import com.isolver.common.util.Timeutil;
import com.isolver.dao.hiFlow.HiFlowRepository;
import com.isolver.dao.oaFlow.OaFlowRepository;
import com.isolver.dao.ruFlow.RuFlowRepository;
import com.isolver.dao.servicePerformance.ServicePerformanceRepository;
import com.isolver.dao.user.UserRepository;
import com.isolver.dao.workOvertime.WorkOvertimeRepository;
import com.isolver.entity.HiFlow;
import com.isolver.entity.OaFlow;
import com.isolver.entity.RuFlow;
import com.isolver.entity.ServicePerformance;
import com.isolver.entity.User;
import com.isolver.entity.WorkOvertime;
import com.isolver.form.OverTimeForm;

/**
 * @author IS1907005
 * @date 2019/11/18
 * @class OverTimeService.java
 */
@Service
public class OverTimeService {
	@Autowired
	private ActivityService activityService;
	@Autowired
	private OaFlowRepository oaFlowRepository;
	@Autowired
	private ServicePerformanceRepository servicePerformanceRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private RuFlowRepository ruFlowRepository;
	@Autowired
	private HiFlowRepository hiFlowRepository;
	@Autowired
	private WorkOvertimeRepository workOvertimeRepository;

	/**
	 * 录入并启动新流程
	 * 
	 * @param formInputList
	 * @param prevAssignJson 预处理人组
	 * @param assignId
	 * @param userId
	 */

	public void startFlow(OverTimeForm overTimeForm, User user) {

		OaFlow oaFlow = oaFlowRepository.findOne(1l);
		ServicePerformance servicePerformance = servicePerformanceRepository.findOne(Long.valueOf(overTimeForm.getServicePerformance()));
		User assigner = userRepository.findOne(Long.valueOf(overTimeForm.getAssigner()));
		RuFlow ruFlow = new RuFlow();
		// 。存进ru的act id
		String runFlowId = activityService.startActivity(oaFlow);
		ruFlow.setActRunFlowId(runFlowId);
		ruFlow.setFlowId(oaFlow);
		ruFlow.setState(2);
		ruFlow.setDealPeople(assigner);
		ruFlow.setDealPeopleNow(user);
		ruFlow.setInsertUserId(user.getId());
		ruFlow.setInsertTime(Timeutil.getTimestamp());
		ruFlow.setUpdateUserId(user.getId());
		ruFlow.setUpdateTime(Timeutil.getTimestamp());
		ruFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		ruFlow = ruFlowRepository.saveAndFlush(ruFlow);

		HiFlow hiFlow = new HiFlow();
		hiFlow.setActId(runFlowId);
		hiFlow.setState(1);
		hiFlow.setApplication(user);
		// 20191128 ccy add 当前处理人和fix 申请人 start
		hiFlow.setDealPeopleNow(user);
		hiFlow.setDealPeople(user);
		// 20191128 ccy add 当前处理人和fix 申请人 end
		hiFlow.setRuFlowId(ruFlow);
		hiFlow.setInsertUserId(user.getId());
		hiFlow.setInsertTime(Timeutil.getTimestamp());
		hiFlow.setUpdateUserId(user.getId());
		hiFlow.setUpdateTime(Timeutil.getTimestamp());
		hiFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		hiFlowRepository.saveAndFlush(hiFlow);

		WorkOvertime workOvertime = new WorkOvertime();
		workOvertime.setUser(user);
		workOvertime.setWorkOvertimeDate(Timestamp.valueOf(overTimeForm.getWorkOvertimeDate().replaceAll("/", "-") + " 00:00:00"));
		workOvertime.setWorkOvertimeStart(Timestamp.valueOf(overTimeForm.getWorkOvertimeDate().replaceAll("/", "-") + " " + overTimeForm.getTimeStart() + ":00"));
		workOvertime.setWorkOvertimeEnd(Timestamp.valueOf(overTimeForm.getWorkOvertimeDate().replaceAll("/", "-") + " " + overTimeForm.getTimeEnd() + ":00"));
		workOvertime.setProjectNo(overTimeForm.getProjectId());
		workOvertime.setWorkContent(overTimeForm.getWorkContent());
		workOvertime.setRuFlow(ruFlow);
		workOvertime.setInsertUserId(user.getId());
		workOvertime.setInsertTime(Timeutil.getTimestamp());
		workOvertime.setUpdateUserId(user.getId());
		workOvertime.setUpdateTime(Timeutil.getTimestamp());
		workOvertime.setDeleteFlag(SysStaticConst.NOTDELE);
		workOvertime.setServicePerformance(servicePerformance);
		workOvertimeRepository.saveAndFlush(workOvertime);
	}

	/**
	 * 下一步骤
	 * 
	 * @param assign   审批人
	 * @param ruFlowId
	 * @param user     提交用户
	 */
	public void nextStep(User assign, Long ruFlowId, User user) {
		RuFlow ruFlow = ruFlowRepository.findOne(ruFlowId);
		WorkOvertime workOvertime = workOvertimeRepository.findByRuFlow(ruFlow);
		ProcessEngineUtil.getProcessEngine().getTaskService()
				.complete(ProcessEngineUtil.getProcessEngine().getTaskService().createTaskQuery().processInstanceId(ruFlow.getActRunFlowId()).singleResult().getId());
		HiFlow hiFlow = new HiFlow();
		hiFlow.setActId(ruFlow.getActRunFlowId());
		hiFlow.setState(ruFlow.getState());
		hiFlow.setApplication(workOvertime.getUser());
		hiFlow.setDealPeople(ruFlow.getDealPeople());
		hiFlow.setDealPeopleNow(ruFlow.getDealPeopleNow());
		hiFlow.setRuFlowId(ruFlow);
		hiFlow.setInsertUserId(user.getId());
		hiFlow.setInsertTime(Timeutil.getTimestamp());
		hiFlow.setUpdateUserId(user.getId());
		hiFlow.setUpdateTime(Timeutil.getTimestamp());
		hiFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		hiFlowRepository.saveAndFlush(hiFlow);

		if (ruFlow.getState() == 2) {
			ruFlow.setState(3);
			ruFlow.setDealPeople(assign);
			ruFlow.setDealPeopleNow(user);
			ruFlow.setUpdateUserId(user.getId());
			ruFlow.setUpdateTime(Timeutil.getTimestamp());
			ruFlow.setDeleteFlag(SysStaticConst.NOTDELE);
			ruFlow = ruFlowRepository.saveAndFlush(ruFlow);
		} else {
			ruFlow.setState(4);
			ruFlow.setDealPeopleNow(user);
			ruFlow.setUpdateUserId(user.getId());
			ruFlow.setUpdateTime(Timeutil.getTimestamp());
			ruFlow.setDeleteFlag(SysStaticConst.ISDELE);
			ruFlow = ruFlowRepository.saveAndFlush(ruFlow);
		}
	}

	/**
	 * 录入并启动新流程
	 * 
	 * @param formInputList
	 * @param prevAssignJson 预处理人组
	 * @param assignId
	 * @param userId
	 */

	public void restartFlow(OverTimeForm overTimeForm, User user, Long ruFlowId) {

		OaFlow oaFlow = oaFlowRepository.findOne(1l);
//		ServicePerformance servicePerformance = servicePerformanceRepository.findOne(Long.valueOf(overTimeForm.getServicePerformance()));
		User assigner = userRepository.findOne(Long.valueOf(overTimeForm.getAssigner()));
		RuFlow ruFlowModel = ruFlowRepository.findOne(ruFlowId);
		RuFlow ruFlowEntity = new RuFlow();
		BeanUtils.copyProperties(ruFlowModel, ruFlowEntity);

		// 。存进ru的act id
		String runFlowId = activityService.startActivity(oaFlow);
		ruFlowEntity.setActRunFlowId(runFlowId);
		ruFlowEntity.setFlowId(oaFlow);
		ruFlowEntity.setState(2);
		ruFlowEntity.setDealPeople(assigner);
		ruFlowEntity.setDealPeopleNow(user);
		ruFlowEntity.setInsertUserId(user.getId());
		ruFlowEntity.setInsertTime(Timeutil.getTimestamp());
		ruFlowEntity.setUpdateUserId(user.getId());
		ruFlowEntity.setUpdateTime(Timeutil.getTimestamp());
//		ruFlowEntity.setDeleteFlag(SysStaticConst.NOTDELE);
		ruFlowEntity = ruFlowRepository.saveAndFlush(ruFlowEntity);

		HiFlow hiFlow = new HiFlow();
		hiFlow.setActId(runFlowId);
		hiFlow.setState(1);
		hiFlow.setApplication(user);
		// 20191128 ccy add 当前处理人和fix 申请人 start
		hiFlow.setDealPeopleNow(user);
		hiFlow.setDealPeople(user);
		// 20191128 ccy add 当前处理人和fix 申请人 end
		hiFlow.setRuFlowId(ruFlowEntity);
		hiFlow.setInsertUserId(user.getId());
		hiFlow.setInsertTime(Timeutil.getTimestamp());
		hiFlow.setUpdateUserId(user.getId());
		hiFlow.setUpdateTime(Timeutil.getTimestamp());
		hiFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		hiFlowRepository.saveAndFlush(hiFlow);

		WorkOvertime workOvertimeModel = workOvertimeRepository.findByRuFlow(ruFlowEntity);
		WorkOvertime workOvertimeEntity = new WorkOvertime();
		BeanUtils.copyProperties(workOvertimeModel, workOvertimeEntity);
//		workOvertime.setUser(user);
		workOvertimeEntity.setWorkOvertimeDate(Timestamp.valueOf(overTimeForm.getWorkOvertimeDate().replaceAll("/", "-") + " 00:00:00"));
		workOvertimeEntity.setWorkOvertimeStart(Timestamp.valueOf(overTimeForm.getWorkOvertimeDate().replaceAll("/", "-") + " " + overTimeForm.getTimeStart() + ":00"));
		workOvertimeEntity.setWorkOvertimeEnd(Timestamp.valueOf(overTimeForm.getWorkOvertimeDate().replaceAll("/", "-") + " " + overTimeForm.getTimeEnd() + ":00"));
		workOvertimeEntity.setProjectNo(overTimeForm.getProjectId());
		workOvertimeEntity.setWorkContent(overTimeForm.getWorkContent());
		workOvertimeEntity.setRuFlow(ruFlowEntity);
//		workOvertime.setInsertUserId(user.getId());
//		workOvertime.setInsertTime(Timeutil.getTimestamp());
		workOvertimeEntity.setUpdateUserId(user.getId());
		workOvertimeEntity.setUpdateTime(Timeutil.getTimestamp());
//		workOvertimeEntity.setDeleteFlag(SysStaticConst.NOTDELE);
//		workOvertimeEntity.setServicePerformance(servicePerformance);
		workOvertimeRepository.saveAndFlush(workOvertimeEntity);
	}
}
