package com.isolver.service;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.util.ProcessEngineUtil;
import com.isolver.common.util.Timeutil;
import com.isolver.dao.hiFlow.HiFlowRepository;
import com.isolver.dao.oaFlow.OaFlowRepository;
import com.isolver.dao.ruFlow.RuFlowRepository;
import com.isolver.dao.servicePerformance.ServicePerformanceRepository;
import com.isolver.dao.user.UserRepository;
import com.isolver.dao.vacation.VacationRepository;
import com.isolver.entity.HiFlow;
import com.isolver.entity.OaFlow;
import com.isolver.entity.RuFlow;
import com.isolver.entity.ServicePerformance;
import com.isolver.entity.User;
import com.isolver.entity.Vacation;
import com.isolver.form.HolidayForm;

/**
 * @author IS1907005
 * @date 2019/11/14
 * @class HolidayService.java
 */
@Service
public class HolidayService {

	@Autowired
	private ActivityService activityService;
	@Autowired
	private OaFlowRepository oaFlowRepository;
	@Autowired
	private ServicePerformanceRepository servicePerformanceRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private RuFlowRepository ruFlowRepository;
	@Autowired
	private VacationRepository vacationRepository;
	@Autowired
	private HiFlowRepository hiFlowRepository;

	/**
	 * 录入并启动新流程
	 * 
	 * @param formInputList
	 * @param prevAssignJson 预处理人组
	 * @param assignId
	 * @param userId
	 */

	public void startFlow(HolidayForm holidayForm, User user) {

		OaFlow oaFlow = oaFlowRepository.findOne(1l);
		ServicePerformance servicePerformance = servicePerformanceRepository
				.findOne(Long.valueOf(holidayForm.getServicePerformance()));
		User assigner = userRepository.findOne(Long.valueOf(holidayForm.getAssigner()));
		RuFlow ruFlow = new RuFlow();
		// 。存进ru的act id
		String runFlowId = activityService.startActivity(oaFlow);
		ruFlow.setActRunFlowId(runFlowId);
		ruFlow.setFlowId(oaFlow);
		ruFlow.setState(2);
		ruFlow.setDealPeople(assigner);
		ruFlow.setDealPeopleNow(user);
		ruFlow.setInsertUserId(user.getId());
		ruFlow.setInsertTime(Timeutil.getTimestamp());
		ruFlow.setUpdateUserId(user.getId());
		ruFlow.setUpdateTime(Timeutil.getTimestamp());
		ruFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		ruFlow = ruFlowRepository.saveAndFlush(ruFlow);

		HiFlow hiFlow = new HiFlow();
		hiFlow.setActId(runFlowId);
		hiFlow.setState(1);
		// 20191128 ccy add 当前处理人和fix 申请人 start
		hiFlow.setDealPeopleNow(user);
		hiFlow.setDealPeople(user);
		// 20191128 ccy add 当前处理人和fix 申请人 end
		hiFlow.setRuFlowId(ruFlow);
		hiFlow.setInsertUserId(user.getId());
		hiFlow.setInsertTime(Timeutil.getTimestamp());
		hiFlow.setUpdateUserId(user.getId());
		hiFlow.setUpdateTime(Timeutil.getTimestamp());
		hiFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		hiFlowRepository.saveAndFlush(hiFlow);

		Vacation vacation = new Vacation();
		vacation.setUser(user);
		vacation.setVacationType(Integer.parseInt(holidayForm.getType()));
		vacation.setVacationStart(Timestamp
				.valueOf(holidayForm.getDate().replaceAll("/", "-") + " " + holidayForm.getTimeStart() + ":00"));
		vacation.setVacationEnd(
				Timestamp.valueOf(holidayForm.getDate().replaceAll("/", "-") + " " + holidayForm.getTimeEnd() + ":00"));
		vacation.setHasDocument(holidayForm.getBill() != null ? true : false);
		vacation.setVacationContent(holidayForm.getReason());
		vacation.setVacationMark(holidayForm.getContent());
		vacation.setRuFlow(ruFlow);
		vacation.setInsertUserId(user.getId());
		vacation.setInsertTime(Timeutil.getTimestamp());
		vacation.setUpdateUserId(user.getId());
		vacation.setUpdateTime(Timeutil.getTimestamp());
		vacation.setDeleteFlag(SysStaticConst.NOTDELE);
		vacation.setServicePerformance(servicePerformance);
		vacationRepository.saveAndFlush(vacation);
	}

	/**
	 * 下一步骤
	 * 
	 * @param assign   审批人
	 * @param ruFlowId
	 * @param user     提交用户
	 */
	public void nextStep(User assign, Long ruFlowId, User user) {
		RuFlow ruFlow = ruFlowRepository.findOne(ruFlowId);
		Vacation vacation = vacationRepository.findByRuFlow(ruFlow);
		ProcessEngineUtil.getProcessEngine().getTaskService().complete(ProcessEngineUtil.getProcessEngine()
				.getTaskService().createTaskQuery().processInstanceId(ruFlow.getActRunFlowId()).singleResult().getId());
		HiFlow hiFlow = new HiFlow();
		hiFlow.setActId(ruFlow.getActRunFlowId());
		hiFlow.setState(ruFlow.getState());
		hiFlow.setApplication(vacation.getUser());
		hiFlow.setDealPeople(ruFlow.getDealPeople());
		hiFlow.setDealPeopleNow(ruFlow.getDealPeopleNow());
		hiFlow.setRuFlowId(ruFlow);
		hiFlow.setInsertUserId(user.getId());
		hiFlow.setInsertTime(Timeutil.getTimestamp());
		hiFlow.setUpdateUserId(user.getId());
		hiFlow.setUpdateTime(Timeutil.getTimestamp());
		hiFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		hiFlowRepository.saveAndFlush(hiFlow);

		if (ruFlow.getState() == 2) {
			ruFlow.setState(3);
			ruFlow.setDealPeople(assign);
			ruFlow.setDealPeopleNow(user);
			ruFlow.setUpdateUserId(user.getId());
			ruFlow.setUpdateTime(Timeutil.getTimestamp());
			ruFlow.setDeleteFlag(SysStaticConst.NOTDELE);
			ruFlow = ruFlowRepository.saveAndFlush(ruFlow);
		} else {
			ruFlow.setState(4);
			ruFlow.setDealPeopleNow(user);
			ruFlow.setUpdateUserId(user.getId());
			ruFlow.setUpdateTime(Timeutil.getTimestamp());
			ruFlow.setDeleteFlag(SysStaticConst.ISDELE);
			ruFlow = ruFlowRepository.saveAndFlush(ruFlow);
		}
	}
}
