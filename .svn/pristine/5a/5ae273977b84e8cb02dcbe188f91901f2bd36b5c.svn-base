package com.isolver.common.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.isolver.common.util.Encodeutil;

@EnableWebSecurity
public class BrowerSecurityConfig extends WebSecurityConfigurerAdapter {

//	@Autowired
//	private DataSource dataSource;

	@Autowired
	private MyUserDetailService userDetailService;

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests().antMatchers("/css/**", "/js/**", "/login", "/fonts/**", "/images/**", "/assets/**","/weixin/**","/error")
				.permitAll().and().authorizeRequests().anyRequest().authenticated();

		http.headers().frameOptions().disable();
		
		http.cors();
		
		// 开启自动配置的登录功能
		http.formLogin().usernameParameter("name").passwordParameter("pwd").loginPage("/login").defaultSuccessUrl("/main");

		// 开启自动配置的注销功能,默认重定向到/logout?success,修改为"/"
		http.logout().logoutSuccessUrl("/login");

		http.csrf().disable(); //暂时禁用CSRF，否则无法提交表单
	}

	@Override
	public void configure(AuthenticationManagerBuilder auth) throws Exception {
		DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		authProvider.setUserDetailsService(userDetailService);
		authProvider.setPasswordEncoder(new PasswordEncoder() { // md5加密
			@Override
			public boolean matches(CharSequence rawPassword, String encodedPassword) {
				String[] checkArr = encodedPassword.split(",");

				if (checkArr.length > 1) {
					String salt = encodedPassword.split(",")[0];
					String dbPassword = encodedPassword.split(",")[1];
					System.err.println(Encodeutil.MD5Util(salt + rawPassword.toString()));
					return dbPassword.equals(Encodeutil.MD5Util(salt + rawPassword.toString()));
				} else {
					return false;
				}

			}

			@Override
			public String encode(CharSequence rawPassword) {
				return Encodeutil.MD5Util(rawPassword.toString());
			}
		});
		auth.authenticationProvider(authProvider);
	}

}
