package com.isolver.service.wechat;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.isolver.common.constant.SysStaticConst;
import com.isolver.common.constant.SysStatusCodeConst;
import com.isolver.common.util.Result;
import com.isolver.common.util.Timeutil;
import com.isolver.dao.claimingExpenses.ClaimingExpensesRepository;
import com.isolver.dao.department.DepartmentRepository;
import com.isolver.dao.fileInfo.FileInfoRepository;
import com.isolver.dao.hiFlow.HiFlowRepository;
import com.isolver.dao.oaFlow.OaFlowRepository;
import com.isolver.dao.role.RoleRepository;
import com.isolver.dao.ruFlow.RuFlowRepository;
import com.isolver.dao.user.UserRepository;
import com.isolver.dto.DepartDto;
import com.isolver.dto.UserDto;
import com.isolver.entity.ClaimingExpenses;
import com.isolver.entity.Department;
import com.isolver.entity.FileInfo;
import com.isolver.entity.HiFlow;
import com.isolver.entity.OaFlow;
import com.isolver.entity.Role;
import com.isolver.entity.RuFlow;
import com.isolver.entity.User;
import com.isolver.form.wechat.ClaimingExpensesForm;
import com.isolver.service.ActivityService;

@Service
public class ClamingExpensesService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private DepartmentRepository departmentRepository;

	@Autowired
	private ClaimingExpensesRepository claimingExpensesRepository;

	@Autowired
	private ActivityService activityService;
	@Autowired
	private OaFlowRepository oaFlowRepository;
	@Autowired
	private RuFlowRepository ruFlowRepository;
	@Autowired
	private HiFlowRepository hiFlowRepository;

	@Autowired
	private FileInfoRepository fileInfoRepository;

	/**
	 * 初始化
	 * 
	 * @return
	 */
	public Map<String, Object> init() {
		Map<String, Object> map = new HashMap<>();
		List<DepartDto> departDto = departmentRepository.findAllByDeleteflag(SysStaticConst.NOTDELE);
		Role role = roleRepository.findOne(Long.valueOf(3));
		List<UserDto> userDto = userRepository.findByRoleDeleteFlag(role, SysStaticConst.NOTDELE);
		map.put("depart", departDto);
		map.put("user", userDto);
		return map;
	}

	/**
	 * 提交报销
	 * 
	 * @param claimingExpensesForm
	 * @return
	 */
	public Result<Object> insertClamingExpenses(ClaimingExpensesForm claimingExpensesForm) {
		// ·申请用户
		User user = userRepository.findOne(Long.parseLong(claimingExpensesForm.getUserId()));
		Department depart = departmentRepository.findOne(Long.parseLong(claimingExpensesForm.getDepartId()));

		// ·审批人
		User flowUser = userRepository.findOne(Long.parseLong(claimingExpensesForm.getFlowUser()));

		Timestamp presentTime = Timeutil.getTimestamp();

		// 流程
		OaFlow oaFlow = oaFlowRepository.findOne(2l);
		RuFlow ruFlow = insertOaFlow(user, flowUser, oaFlow, presentTime);
		insertHiFlow(user, flowUser, oaFlow, ruFlow, presentTime);

		// ·报销
		ClaimingExpenses claimingExpensesModal = insertClaimingExpenses(claimingExpensesForm, user, depart, ruFlow, presentTime);

		List<FileInfo> fileInfoList = new ArrayList<>();
		for (int i = 0; i < claimingExpensesForm.getPhoto().size(); i++) {
			Long fileId = claimingExpensesForm.getPhoto().get(i);
			FileInfo fileInfo = fileInfoRepository.findOne(fileId);
			FileInfo fileInfoEntity = new FileInfo();
			BeanUtils.copyProperties(fileInfo, fileInfoEntity);

			fileInfoEntity.setTableId(claimingExpensesModal.getId().toString());
			fileInfoEntity.setTableName("claiming_expenses");
			fileInfoList.add(fileInfoEntity);
		}

		fileInfoRepository.save(fileInfoList);
		fileInfoRepository.flush();

		return new Result<>(SysStatusCodeConst.SUCCESS);
	}

	/**
	 * 保存到报销表
	 * 
	 * @param claimingExpensesForm
	 * @param user
	 * @param depart
	 * @param ruFlow
	 * @param presentTime
	 * 
	 * @return
	 */
	public ClaimingExpenses insertClaimingExpenses(ClaimingExpensesForm claimingExpensesForm, User user, Department depart, RuFlow ruFlow, Timestamp presentTime) {
		ClaimingExpenses entity = new ClaimingExpenses();
		entity.setUser(user);
		entity.setDepartment(depart);
		entity.setType(claimingExpensesForm.getType());
		entity.setExpensesType(claimingExpensesForm.getExpensesType());
		entity.setMoney(claimingExpensesForm.getMoney());
		entity.setProjectId(claimingExpensesForm.getProjectId());
		entity.setCustomerName(claimingExpensesForm.getCustomerName());
		entity.setExpenseCompany(claimingExpensesForm.getExpenseCompany());
		entity.setContent(claimingExpensesForm.getContent());
		entity.setRuFlow(ruFlow);

		entity.setDeleteFlag(SysStaticConst.NOTDELE);
		entity.setInsertUserId(Long.parseLong(claimingExpensesForm.getUserId()));
		entity.setInsertTime(presentTime);
		entity.setUpdateUserId(Long.parseLong(claimingExpensesForm.getUserId()));
		entity.setUpdateTime(entity.getInsertTime());
		entity.setVersion(0);
		ClaimingExpenses result = claimingExpensesRepository.saveAndFlush(entity);

		return result;
	}

	/**
	 * 保存到流程表
	 * 
	 * @param user
	 * @param flowUser
	 * @param oaFlow
	 * @param presentTime
	 * 
	 * @return
	 */
	public RuFlow insertOaFlow(User user, User flowUser, OaFlow oaFlow, Timestamp presentTime) {
		// ·当前流程
		RuFlow ruFlow = new RuFlow();
		// 。存进ru的act id
		String runFlowId = activityService.startActivity(oaFlow);
		ruFlow.setActRunFlowId(runFlowId);
		ruFlow.setFlowId(oaFlow);
		ruFlow.setState(2);

		ruFlow.setDealPeople(flowUser);
		ruFlow.setDealPeopleNow(user);
		ruFlow.setInsertUserId(user.getId());
		ruFlow.setInsertTime(presentTime);
		ruFlow.setUpdateUserId(user.getId());
		ruFlow.setUpdateTime(ruFlow.getInsertTime());
		ruFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		ruFlow = ruFlowRepository.saveAndFlush(ruFlow);

		return ruFlow;
	}

	/**
	 * 保存到历史流程表
	 * 
	 * @param user
	 * @param flowUser
	 * @param oaFlow
	 * @param ruFlow
	 * @param presentTime
	 * 
	 * @return
	 */
	public void insertHiFlow(User user, User flowUser, OaFlow oaFlow, RuFlow ruFlow, Timestamp presentTime) {
		HiFlow hiFlow = new HiFlow();
		hiFlow.setActId(oaFlow.getActId());
		hiFlow.setState(1);
		hiFlow.setApplication(user);
		hiFlow.setDealPeople(flowUser);
		hiFlow.setRuFlowId(ruFlow);
		hiFlow.setInsertUserId(user.getId());
		hiFlow.setInsertTime(presentTime);
		hiFlow.setUpdateUserId(user.getId());
		hiFlow.setUpdateTime(hiFlow.getInsertTime());
		hiFlow.setDeleteFlag(SysStaticConst.NOTDELE);
		hiFlowRepository.saveAndFlush(hiFlow);
	}

}
